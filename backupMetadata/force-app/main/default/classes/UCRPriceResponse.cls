//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class UCRPriceResponse {

	public class DatesOfService {
		public String From_Z {get;set;} // in json: From
		public String To {get;set;} 

		public DatesOfService(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'From') {
							From_Z = parser.getText();
						} else if (text == 'To') {
							To = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'DatesOfService consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Services {
		public Integer LineNumber {get;set;} 
		public DatesOfService DatesOfService {get;set;} 
		public String PlaceOfService {get;set;} 
		public String ProcedureeCode {get;set;} 
		public String RevenueCode {get;set;} 
		public String DRG {get;set;} 
		public Integer Units {get;set;} 
		public List<String> ModifierList {get;set;} 
		public List<DiagnosisList> DiagnosisList {get;set;} 
		public Object Price {get;set;} 

		public Services(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'LineNumber') {
							LineNumber = parser.getIntegerValue();
						} else if (text == 'DatesOfService') {
							DatesOfService = new DatesOfService(parser);
						} else if (text == 'PlaceOfService') {
							PlaceOfService = parser.getText();
						} else if (text == 'ProcedureeCode') {
							ProcedureeCode = parser.getText();
						} else if (text == 'RevenueCode') {
							RevenueCode = parser.getText();
						} else if (text == 'DRG') {
							DRG = parser.getText();
						} else if (text == 'Units') {
							Units = parser.getIntegerValue();
						} else if (text == 'ModifierList') {
							ModifierList = arrayOfString(parser);
						} else if (text == 'DiagnosisList') {
							DiagnosisList = arrayOfDiagnosisList(parser);
						} else if (text == 'Price') {
							Price = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Services consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public TransactionControl TransactionControl {get;set;} 
	public ProviderInfo ProviderInfo {get;set;} 
	public List<Services> Services {get;set;} 

	public UCRPriceResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'TransactionControl') {
						TransactionControl = new TransactionControl(parser);
					} else if (text == 'ProviderInfo') {
						ProviderInfo = new ProviderInfo(parser);
					} else if (text == 'Services') {
						Services = arrayOfServices(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'UCRPriceResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class ProviderInfo {
		public String ZIP {get;set;} 
		public String NPI {get;set;} 
		public String CCN {get;set;} 

		public ProviderInfo(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ZIP') {
							ZIP = parser.getText();
						} else if (text == 'NPI') {
							NPI = parser.getText();
						} else if (text == 'CCN') {
							CCN = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ProviderInfo consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DiagnosisList {

		public DiagnosisList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'DiagnosisList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TransactionControl {
		public String ClientID {get;set;} 
		public String TransactionID {get;set;} 
		public String ClaimType {get;set;} 

		public TransactionControl(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ClientID') {
							ClientID = parser.getText();
						} else if (text == 'TransactionID') {
							TransactionID = parser.getText();
						} else if (text == 'ClaimType') {
							ClaimType = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'TransactionControl consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static List<UCRPriceResponse> parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return arrayOfUCRPriceResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }




    private static List<Services> arrayOfServices(System.JSONParser p) {
        List<Services> res = new List<Services>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Services(p));
        }
        return res;
    }







    private static List<UCRPriceResponse> arrayOfUCRPriceResponse(System.JSONParser p) {
        List<UCRPriceResponse> res = new List<UCRPriceResponse>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new UCRPriceResponse(p));
        }
        return res;
    }


    private static List<DiagnosisList> arrayOfDiagnosisList(System.JSONParser p) {
        List<DiagnosisList> res = new List<DiagnosisList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DiagnosisList(p));
        }
        return res;
    }




}