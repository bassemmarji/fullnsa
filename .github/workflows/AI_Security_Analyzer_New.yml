name: AI-Powered New Data Model Analyzer

on:
  workflow_dispatch:
    inputs:
      org_alias:
        description: "Salesforce org alias"
        required: true
        default: "dev"
      model_name:
        description: "Ollama model to use"
        required: true
        default: "llama3:latest"

env:
  NODE_VERSION: "20"
  DATA_DIR: "data-model-data"

jobs:
  collect-data:
    name: Collect Salesforce Metadata
    runs-on: ubuntu-latest
    outputs:
      has_data: ${{ steps.check.outputs.has_data }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node + Salesforce CLI
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
        # Lighter install (no update)
      - run: npm install -g @salesforce/cli jq

      - name: Auth to Salesforce
        run: echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias "${{ github.event.inputs.org_alias }}" --sfdx-url-stdin

      - name: Query Metadata in Bulk
        run: |
          mkdir -p $DATA_DIR

          echo "🔍 Querying EntityDefinition..."
          sf data query --use-tooling-api --target-org "${{ github.event.inputs.org_alias }}" \
            --result-format json \
            --query "SELECT DeveloperName, Label, NamespacePrefix, ExternalSharingModel, InternalSharingModel 
                     FROM EntityDefinition 
                     WHERE IsCustomizable = true" > "$DATA_DIR/objects.json"

          echo "🔍 Querying FieldDefinition..."
          sf data query --use-tooling-api --target-org "${{ github.event.inputs.org_alias }}" \
            --result-format json \
            --query "SELECT QualifiedApiName, EntityDefinition.DeveloperName, DataType, IsIndexed, IsCalculated, IsNillable, Length, Precision, Scale 
                     FROM FieldDefinition 
                     WHERE EntityDefinition.IsCustomizable = true LIMIT 50000" > "$DATA_DIR/fields.json"

          echo "🔍 Querying Relationships..."
          sf data query --use-tooling-api --target-org "${{ github.event.inputs.org_alias }}" \
            --result-format json \
            --query "SELECT QualifiedApiName, EntityDefinition.DeveloperName, RelationshipName, ReferenceTo 
                     FROM FieldDefinition 
                     WHERE DataType IN ('Lookup','MasterDetail')" > "$DATA_DIR/relationships.json"

          echo "🔍 Querying Validation Rules..."
          sf data query --use-tooling-api --target-org "${{ github.event.inputs.org_alias }}" \
            --result-format json \
            --query "SELECT ValidationName, EntityDefinition.DeveloperName, Active, ErrorMessage 
                     FROM ValidationRule WHERE Active = true" > "$DATA_DIR/validation_rules.json"

          echo "🔍 Querying Apex Triggers + Flows..."
          sf data query --use-tooling-api --target-org "${{ github.event.inputs.org_alias }}" \
            --result-format json \
            --query "SELECT Name, TableEnumOrId, Status FROM ApexTrigger" > "$DATA_DIR/triggers.json"

          sf data query --use-tooling-api --target-org "${{ github.event.inputs.org_alias }}" \
            --result-format json \
            --query "SELECT DeveloperName, Status, ProcessType FROM FlowDefinition" > "$DATA_DIR/flows.json"

      - name: Validate Data Availability
        id: check
        run: |
          object_count=$(jq -r '.result.totalSize // 0' "$DATA_DIR/objects.json")
          field_count=$(jq -r '.result.totalSize // 0' "$DATA_DIR/fields.json")
          echo "Objects: $object_count, Fields: $field_count"

          if [ "$object_count" -gt 0 ] && [ "$field_count" -gt 0 ]; then
            echo "has_data=true" >> $GITHUB_OUTPUT
          else
            echo "has_data=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: data-model-lite
          path: ${{ env.DATA_DIR }}
          retention-days: 7

  analyze-ai:
    name: Analyze Data Model (AI)
    runs-on: ubuntu-latest
    needs: collect-data
    if: needs.collect-data.outputs.has_data == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: data-model-lite
          path: data

      - name: Setup Ollama (cached)
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          ollama serve &
          for i in {1..20}; do curl -s http://localhost:11434/api/version && break; sleep 2; done
          ollama pull "${{ github.event.inputs.model_name }}"

      - name: Run Analysis
        run: |
          echo "# AI Data Model Report" > report.md
          echo "**Model:** ${{ github.event.inputs.model_name }}" >> report.md
          echo "**Generated:** $(date)" >> report.md
          echo "" >> report.md

          prompt="Analyze the Salesforce data model for structure, relationships, and best practices.
          Provide findings in Markdown tables with recommendations and improvement ideas.
          Focus on normalization, indexing, and automation complexity.
          Use the provided JSON metadata."

          ollama run "${{ github.event.inputs.model_name }}" -p "$prompt" \
            -f data/objects.json -f data/fields.json -f data/relationships.json >> report.md

      - uses: actions/upload-artifact@v4
        with:
          name: ai-analysis-report
          path: report.md
          retention-days: 14
