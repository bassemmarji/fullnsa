name: AI-Powered New Data Model Analyzer (Lite-Safe)

on:
  workflow_dispatch:
    inputs:
      org_alias:
        description: "Salesforce org alias"
        required: true
        default: "dev"
      model_name:
        description: "Ollama model to use"
        required: true
        default: "llama3:latest"

env:
  NODE_VERSION: "20"
  DATA_DIR: "data-model-data"

jobs:
  collect-data:
    name: Collect Salesforce Metadata
    runs-on: ubuntu-latest
    outputs:
      has_data: ${{ steps.check.outputs.has_data }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node + Salesforce CLI
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Salesforce CLI + jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          npm install -g @salesforce/cli

      - name: Authenticate to Salesforce
        run: |
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url \
            --alias "${{ github.event.inputs.org_alias }}" \
            --sfdx-url-stdin

      - name: Query Salesforce Metadata (Safe Mode)
        run: |
          mkdir -p "$DATA_DIR"
          queries=(
            "objects:SELECT DeveloperName,Label,NamespacePrefix,ExternalSharingModel,InternalSharingModel FROM EntityDefinition WHERE IsCustomizable=true LIMIT 2000"
            "fields:SELECT QualifiedApiName,EntityDefinition.DeveloperName,DataType,IsIndexed,IsCalculated,IsNillable,Length,Precision,Scale FROM FieldDefinition WHERE EntityDefinition.IsCustomizable=true LIMIT 2000"
            "relationships:SELECT QualifiedApiName,EntityDefinition.DeveloperName,RelationshipName,ReferenceTo FROM FieldDefinition WHERE EntityDefinition.IsCustomizable=true AND DataType IN ('Lookup','MasterDetail') LIMIT 2000"
            "validation_rules:SELECT ValidationName,EntityDefinition.DeveloperName,Active,ErrorMessage,Description FROM ValidationRule WHERE Active=true LIMIT 2000"
            "triggers:SELECT Name,TableEnumOrId,Status,CreatedDate,LastModifiedDate FROM ApexTrigger LIMIT 2000"
            "flows:SELECT DeveloperName,Description,Status,ProcessType,CreatedDate,LastModifiedDate FROM FlowDefinition LIMIT 2000"
            "record_types:SELECT DeveloperName,SobjectType,Name,Description,IsActive FROM RecordType LIMIT 2000"
          )
          for q in "${queries[@]}"; do
            name=${q%%:*}
            soql=${q#*:}
            echo "🔍 Querying $name..."
            sf data query --use-tooling-api --target-org "${{ github.event.inputs.org_alias }}" \
              --result-format json --query "$soql" > "$DATA_DIR/${name}.json" || echo '{"result":{"records":[]}}' > "$DATA_DIR/${name}.json"
          done

      - name: Validate Data Availability
        id: check
        run: |
          object_count=$(jq -r '.result.totalSize // 0' "$DATA_DIR/objects.json")
          field_count=$(jq -r '.result.totalSize // 0' "$DATA_DIR/fields.json")
          echo "Objects: $object_count, Fields: $field_count"
          if [ "$object_count" -gt 0 ] && [ "$field_count" -gt 0 ]; then
            echo "✅ Data model metadata available"
            echo "has_data=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No metadata found"
            echo "has_data=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: data-model-metadata-lite
          path: ${{ env.DATA_DIR }}
          retention-days: 7

  analyze-ai:
    name: Analyze Data Model (AI)
    runs-on: ubuntu-latest
    needs: collect-data
    if: needs.collect-data.outputs.has_data == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: data-model-metadata-lite
          path: data

      - name: Setup Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          ollama serve &
          for i in {1..20}; do
            if curl -s http://localhost:11434/api/version >/dev/null; then
              echo "✅ Ollama API ready"
              break
            fi
            echo "⏳ Waiting for Ollama to start ($i/20)..."
            sleep 3
          done
          ollama pull "${{ github.event.inputs.model_name }}"

      - name: Analyze Data Model with AI
        run: |
          REPORT_FILE="data_model_analysis_$(date +%Y%m%d_%H%M%S).md"
          MODEL="${{ github.event.inputs.model_name }}"

          jq -s '{
            objects: (.[0].result.records // []),
            fields: (.[1].result.records // []),
            relationships: (.[2].result.records // []),
            validation_rules: (.[3].result.records // []),
            triggers: (.[4].result.records // []),
            flows: (.[5].result.records // []),
            record_types: (.[6].result.records // [])
          }' data/*.json > data/full_metadata.json

          total_records=$(jq '[.objects, .fields, .relationships, .validation_rules, .triggers, .flows, .record_types] | map(length) | add' data/full_metadata.json)
          if [ "$total_records" -eq 0 ]; then
            echo "# Salesforce Data Model Analysis Report" > "$REPORT_FILE"
            echo "**Model:** $MODEL" >> "$REPORT_FILE"
            echo "**Generated:** $(date)" >> "$REPORT_FILE"
            echo "- No metadata found for analysis" >> "$REPORT_FILE"
            exit 0
          fi

          SYSTEM_PROMPT='You are a senior Salesforce Data Architect. Be concise and use bullet points only. Never fabricate metadata.'

          RAW_PROMPT=$(cat <<'EOF'
          Analyze the following Salesforce metadata JSON. Respond **ONLY** with these EXACT sections:
          ## 🔍 Key Findings
          ## 🏛 Object Modeling & Relationships
          ## 🚀 Performance & Indexing
          ## 🔐 Security & Governance
          ## ✅ Recommendations

          ### METADATA INPUT ###
          EOF
          )

          # Escape and append JSON safely
          USER_PROMPT="$RAW_PROMPT $(jq -c '.' data/full_metadata.json)"

          echo "🧠 Sending prompt to Ollama..."
          REQUEST_JSON=$(jq -n --arg model "$MODEL" --arg prompt "$USER_PROMPT" --arg system "$SYSTEM_PROMPT" \
            '{model:$model, prompt:$prompt, system:$system, options:{temperature:0.2, top_p:0.9}, stream:false}')

          echo "$REQUEST_JSON" > debug_ollama_request.json

          # Run Ollama call with error checking
          AI_RESPONSE=$(curl -s -X POST http://localhost:11434/api/generate \
            -H "Content-Type: application/json" -d @"debug_ollama_request.json" | jq -r '.response')

          if [ -z "$AI_RESPONSE" ] || [ "$AI_RESPONSE" == "null" ]; then
            echo "⚠️ Empty AI response. Check Ollama logs."
            exit 1
          fi

          echo "# Salesforce Data Model Analysis Report" > "$REPORT_FILE"
          echo "**Model:** $MODEL" >> "$REPORT_FILE"
          echo "**Generated:** $(date)" >> "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"
          echo "$AI_RESPONSE" >> "$REPORT_FILE"

      - uses: actions/upload-artifact@v4
        with:
          name: ai-data-model-report
          path: data_model_analysis_*.md
          retention-days: 14

      - name: 📄 AI Summary
        run: |
          echo "## 🧠 AI Data Model Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Model: \`${{ github.event.inputs.model_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Generated report successfully" >> $GITHUB_STEP_SUMMARY
