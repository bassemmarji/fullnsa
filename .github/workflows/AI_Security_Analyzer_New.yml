name: AI New Powered Profiles and Permission Sets Analyzer

on:
  workflow_dispatch:
    inputs:
      org_alias:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
      model_name:
        type: choice
        description: "Ollama model to use"
        options:
          - llama3:latest
          - gemma2:27b
          - mistral-large
        default: llama3:latest

env:
  ORG_ALIAS: ${{ github.event.inputs.org_alias }}
  MODEL_NAME: ${{ github.event.inputs.model_name }}
  NODE_VERSION: "20"
  DATA_DIR: "security-profiles-data"

jobs:
  collect-security-data:
    name: Collect Profiles and Permission Sets Data
    runs-on: ubuntu-latest
    outputs:
      has_data: ${{ steps.check-data.outputs.has_data }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install --global @salesforce/cli
          sf plugins:update
          sudo apt-get update && sudo apt-get install -y jq

      - name: 🔐 Authenticate to Salesforce Org
        run: |
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin
          sf org list

      - name: 🧩 Query Profiles and Permission Sets
        run: |
          mkdir -p "$DATA_DIR"
          echo "🔍 Querying profiles and permission sets..."
          sf data query --query "SELECT Id, Name, UserLicense.Name, Description, CreatedDate, LastModifiedDate FROM Profile LIMIT 2000" \
            --target-org "$ORG_ALIAS" --result-format json > "$DATA_DIR/profiles.json" || echo "{}" > "$DATA_DIR/profiles.json"

          sf data query --query "SELECT Id, Name, Description, IsOwnedByProfile, Profile.Name, CreatedDate, LastModifiedDate FROM PermissionSet LIMIT 2000" \
            --target-org "$ORG_ALIAS" --result-format json > "$DATA_DIR/permission_sets.json" || echo "{}" > "$DATA_DIR/permission_sets.json"

      - name: Validate Collected Data
        id: check-data
        run: |
          profile_count=$(jq -r '.result.records | length' "$DATA_DIR/profiles.json" 2>/dev/null || echo 0)
          permset_count=$(jq -r '.result.records | length' "$DATA_DIR/permission_sets.json" 2>/dev/null || echo 0)
          total=$((profile_count + permset_count))

          echo "Profiles: $profile_count, Permission Sets: $permset_count"

          if [ "$total" -gt 0 ]; then
            echo "✅ Found security configuration data"
            echo "has_data=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No profiles or permission sets found"
            echo "has_data=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Security Data
        uses: actions/upload-artifact@v4
        with:
          name: security-profiles-data
          path: ${{ env.DATA_DIR }}
          retention-days: 7

  analyze-security-config:
    name: Analyze Profiles and Permission Sets with AI
    runs-on: ubuntu-latest
    needs: collect-security-data
    if: needs.collect-security-data.outputs.has_data == 'true'
    steps:
      - name: Download Security Artifacts
        uses: actions/download-artifact@v4
        with:
          name: security-profiles-data
          path: data

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh -o install.sh
          chmod +x install.sh && ./install.sh
          echo "$HOME/.ollama/bin" >> $GITHUB_PATH
          export PATH="$HOME/.ollama/bin:$PATH"
          ollama serve &
          for i in {1..30}; do
            curl -s http://localhost:11434/api/version && break
            sleep 2
          done

      - name: Download Model
        run: |
          MODEL="${{ inputs.model_name }}"
          echo "📥 Downloading Ollama model: $MODEL"
          ollama pull "$MODEL"
          ollama list

      - name: Summarize Data Before AI Analysis
        run: |
          echo "🧩 Summarizing data for efficient AI input..."
          mkdir -p summaries

          jq '{profiles_summary: [.result.records[] | {Id, Name, UserLicense: .UserLicense.Name, Description}][0:25]}' data/profiles.json > summaries/profiles_summary.json
          jq '{permsets_summary: [.result.records[] | {Id, Name, IsOwnedByProfile, Profile: .Profile.Name}][0:25]}' data/permission_sets.json > summaries/permsets_summary.json

          jq -s '{summary: {profiles: (.[0].profiles_summary|length), permsets: (.[1].permsets_summary|length)}}' summaries/profiles_summary.json summaries/permsets_summary.json > summaries/data_summary.json

          echo "✅ Summarization complete."
          jq '.' summaries/data_summary.json

      - name: Analyze Security Configuration Data
        run: |
          REPORT_FILE="security_analysis_report.md"
          MODEL="${{ inputs.model_name }}"

          profiles=$(cat summaries/profiles_summary.json)
          permsets=$(cat summaries/permsets_summary.json)
          summary=$(cat summaries/data_summary.json)

          prompt_file="prompt.txt"
          cat <<EOF > "$prompt_file"
          ROLE: You are a senior Salesforce security architect.
          
          TASK: Analyze the summarized Salesforce Profiles and Permission Sets data. Identify risks, compliance issues, and optimization opportunities.
          
          DATA SUMMARY:
          $summary
          
          PROFILES (sample):
          $profiles
          
          PERMISSION SETS (sample):
          $permsets
          
          FOLLOW THE STRUCTURED OUTPUT BELOW:
          ## 🚨 Critical Security Findings
          | Severity | Finding | Evidence | Recommendation | Priority | Owner |
          
          ## 👥 Profile Analysis
          | Profile Name | Key Permissions | Risk Level | Notes |
          
          ## 🔑 Permission Sets Analysis
          | Permission Set Name | Key Permissions | Assigned Users | Risk Level | Notes |
          
          ## 📋 Compliance & Best Practices
          | Framework | Issue | Evidence | Recommendation |
          
          ## 🧾 Summary
          - Total Profiles Analyzed: $(jq -r '.summary.profiles' summaries/data_summary.json)
          - Total Permission Sets Analyzed: $(jq -r '.summary.permsets' summaries/data_summary.json)
          - Model Used: $MODEL
          EOF

          echo "🤖 Running AI model with summarized context..."
          ollama run "$MODEL" -p "$(cat "$prompt_file")" > "$REPORT_FILE"

          echo "✅ AI analysis completed. Report saved to $REPORT_FILE"

      - name: Upload Analysis Report
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-report
          path: security_analysis_report.md
          retention-days: 14

      - name: 📄 Analysis Summary
        run: |
          echo "## 🧠 Security Configuration Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Profiles (sampled):** $(jq -r '.summary.profiles' summaries/data_summary.json)" >> $GITHUB_STEP_SUMMARY
          echo "- **Permission Sets (sampled):** $(jq -r '.summary.permsets' summaries/data_summary.json)" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Model:** \`${{ inputs.model_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Report:** \`security_analysis_report.md\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact:** \`security-analysis-report\`" >> $GITHUB_STEP_SUMMARY

