name: Run LWC Tests

on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Alias for the Salesforce org"
        required: true
        default: "orgAlias"
      REPORT_RECIPIENT:
        type: string
        description: "Email recipient for the report"
        default: "bassemmarji@gmail.com"

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}

jobs:
  run_lwc_tests:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Install Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 'Install Salesforce CLI'
        run: npm install @salesforce/cli --global
        
      - name: Verify Salesforce CLI
        run: |
          npm update --global @salesforce/cli
          sf plugins:update
          sf --version

      - name: 'Install jest'
        run: echo "Y" | npm install --save-dev @salesforce/sfdx-lwc-jest jest

      - name: 'Install jq'
        run: echo "Y" | sudo apt-get update && sudo apt-get install -y jq

      - name: 'Authenticate to the Org'
        run: echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin

      - name: 'Validate Org Authentication'
        run: sf org list

      - name: 'Create project with manifest, Navigate to the project folder, Download metadata using SFDX'
        run: |
          # Generate project and manifest
          sf project generate --name "org-metadata" --manifest
          
          if test -f "./config/package.xml"; then
             echo "./config/package.xml file exists"
             cp ./config/package.xml ./org-metadata/manifest
          fi
          
          cd "./org-metadata"
          
          # Retrieve metadata (now including flows)
          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml

      - name: 'List And Copy LWC Test Files Dynamically'
        run: |
          # Go inside the retrieved project
          cd "$GITHUB_WORKSPACE/org-metadata"

          # Loop through all LWC components
          find "force-app/main/default/lwc" -mindepth 1 -maxdepth 1 -type d | while read dir; do
            componentName=$(basename "$dir")
            echo "🔍 Checking for test file for: $componentName"

            # Define source and destination paths
            sourceTestPath="$GITHUB_WORKSPACE/tests/$componentName/__tests__"
            destTestPath="force-app/main/default/lwc/$componentName/__tests__"

            # If test folder exists locally, copy it
            if [ -d "$sourceTestPath" ]; then
              echo "✅ Found test folder for $componentName"
              mkdir -p "$destTestPath"
              cp -r "$sourceTestPath"/* "$destTestPath/"
            else
              echo "🚫 No test file found for $componentName"
            fi
          done

      - name: 'Run LWC Unit Tests'
        id: run_tests
        run: |
          cd "$GITHUB_WORKSPACE/org-metadata"
          npx jest \
            --testPathPattern "$GITHUB_WORKSPACE/org-metadata/force-app/main/default/lwc/.*/__tests__/.*\\.test\\.js" \
            --passWithNoTests \
            --json \
            --outputFile="$GITHUB_WORKSPACE/org-metadata/jest-results.json"
          echo "TEST_EXIT_CODE=$?" >> $GITHUB_ENV

      - name: 'Set Status Based on Test Results'
        run: |
          if [ "$TEST_EXIT_CODE" -eq 0 ]; then
            echo "STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "STATUS=FAILURE" >> $GITHUB_ENV
          fi

      - name: 'Display Test Results'
        if: always()
        run: |
          echo '### 🧪 LWC Unit Test Results' >> $GITHUB_STEP_SUMMARY
          cd "$GITHUB_WORKSPACE/org-metadata"
          
          if [ -f "jest-results.json" ]; then
              echo "Results file found ✅"
              
              TOTAL=$(jq '.numTotalTestSuites' jest-results.json)
              PASSED=$(jq '.numPassedTestSuites' jest-results.json)
              FAILED=$(jq '.numFailedTestSuites' jest-results.json)
              PENDING=$(jq '.numPendingTestSuites' jest-results.json)
      
              echo "Total: $TOTAL | Passed: $PASSED | Failed: $FAILED | Pending: $PENDING" >> $GITHUB_STEP_SUMMARY
              echo '' >> $GITHUB_STEP_SUMMARY
      
              jq -r '
                .testResults[] |
                "📁 Component: \(.name | gsub(".*lwc/"; "") | split("/")[0])\n" +
                "📄 Test File: \(.name | sub(".*/"; ""))\n" +
                "✅ Passed: \( [.assertionResults[] | select(.status == "passed")] | length ) | " +
                "❌ Failed: \( [.assertionResults[] | select(.status == "failed")] | length ) | " +
                "➖ Skipped: \( [.assertionResults[] | select(.status == "pending")] | length )\n"
               ' jest-results.json >> $GITHUB_STEP_SUMMARY
      
          else
              echo '🚫 No test results found.' >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: 'Get Access Token'
        id: get_token
        run: |
          # Get access token from already-authenticated org
          ORG_ALIAS="${{ env.ORG_ALIAS }}"
          OUTPUT=$(sf org display --target-org $ORG_ALIAS --verbose --json)
          
          ACCESS_TOKEN=$(echo "$OUTPUT" | jq -r '.result.access_token')
          INSTANCE_URL=$(echo "$OUTPUT" | jq -r '.result.instance_url')
      
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
          echo "INSTANCE_URL=$INSTANCE_URL" >> $GITHUB_ENV
          
      - name: Debug Token Validity
        run: |
          curl -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
               -H "Content-Type: application/json" \
               ${{ env.INSTANCE_URL }}/services/data/v59.0/query/?q=SELECT+Id+FROM+Organization
      
      - name: Notify Salesforce Webhook with Logging
        id: webhook
        if: always()
        uses: fjogeleit/http-request-action@v1.15.1
        with:
          url: "${{ env.INSTANCE_URL }}/services/apexrest/github/webhook"
          method: 'POST'
          content-type: 'application/json'
          headers: |
            {
              "Authorization": "Bearer ${{ env.ACCESS_TOKEN }}"
            }
          body: |
            {
              "repository": "${{ github.repository }}",
              "workflow": "${{ github.workflow }}",
              "status": "${{ env.STATUS }}",
              "run_id": "${{ github.run_id }}"
            }
          timeout: 10000
      
        - name: Show Full Response
          run: |
            echo "HTTP Status Code: ${{ steps.webhook.outputs.statusCode }}"
            echo "Response Body: ${{ steps.webhook.outputs.body }}"
      
