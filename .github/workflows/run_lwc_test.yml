name: Run LWC Tests

on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Alias for the Salesforce org"
        required: true
        default: "orgAlias"
      REPORT_RECIPIENT:
        type: string
        description: "Email recipient for the report"
        default: "bassemmarji@gmail.com"

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}
  REPORT_RECIPIENT: ${{ github.event.inputs.REPORT_RECIPIENT }}

jobs:
  run_lwc_tests:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Install Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 'Install Salesforce CLI'
        run: npm install @salesforce/cli --global
        
      - name: Verify Salesforce CLI
        run: |
          npm update --global @salesforce/cli
          sf plugins:update
          sf --version

      - name: 'Install jest'
        run: echo "Y" | npm install --save-dev @salesforce/sfdx-lwc-jest jest

      - name: 'Install jq'
        run: echo "Y" | sudo apt-get update && sudo apt-get install -y jq

      - name: 'Authenticate to the Org'
        run: echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin

      - name: 'Validate Org Authentication'
        run: sf org list

      - name: 'Create project with manifest, Navigate to the project folder, Download metadata using SFDX'
        run: |
          # Generate project and manifest
          sf project generate --name "org-metadata" --manifest
          
          if test -f "./config/package.xml"; then
             echo "./config/package.xml file exists"
             cp ./config/package.xml ./org-metadata/manifest
          fi
          
          cd "./org-metadata"
          
          # Retrieve metadata (now including flows)
          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml

      - name: 'List LWC Components'
        run: |
          echo "Listing LWC Component Folders:"
          find "$GITHUB_WORKSPACE/org-metadata/force-app/main/default/lwc" -mindepth 1 -maxdepth 1 -type d | \
            while read dir; do echo "- $(basename "$dir")"; done


      - name: 'Check Test File Exists'
        run: |
          ls -la ""$GITHUB_WORKSPACE/org-metadata/force-app/main/default/lwc/healthPlanManager"
          if [ -f "$GITHUB_WORKSPACE/org-metadata/force-app/main/default/lwc/healthPlanManager/__tests__/healthPlanManager.test.js" ]; then
              echo "Test file found ✅"
          else
              echo "Test file NOT found ❌"
          fi

      - name: 'Run LWC Unit Tests'
        id: run_tests
        run: |
          cd "$GITHUB_WORKSPACE/org-metadata"
          npx jest \
            --testPathPattern "$GITHUB_WORKSPACE/org-metadata/force-app/main/default/lwc/healthPlanManager/__tests__/healthPlanManager.test.js" \
            --passWithNoTests \
            --json \
            --outputFile="$GITHUB_WORKSPACE/org-metadata/jest-results.json"
          echo "TEST_EXIT_CODE=$?" >> $GITHUB_ENV

      - name: 'Set Status Based on Test Results'
        run: |
          if [ "$TEST_EXIT_CODE" -eq 0 ]; then
            echo "STATUS=SUCCESS"
            echo "STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "STATUS=FAILURE"
            echo "STATUS=FAILURE" >> $GITHUB_ENV
          fi

      - name: 'Check Results File Exists'
        run: |
          if [ -f "$GITHUB_WORKSPACE/org-metadata/jest-results.json" ]; then
              echo "Results file found ✅"
              cat "$GITHUB_WORKSPACE/org-metadata/jest-results.json"
          else
              echo "Results file NOT found ❌"
          fi

      - name: 'Display Test Results'
        if: always()
        run: |
          echo '### 🧪 LWC Unit Test Results' >> $GITHUB_STEP_SUMMARY

          if [ -f "$GITHUB_WORKSPACE/org-metadata/jest-results.json" ]; then
              TOTAL=$(jq '.numTotalTestSuites' jest-results.json)
              PASSED=$(jq '.numPassedTestSuites' jest-results.json)
              FAILED=$(jq '.numFailedTestSuites' jest-results.json)
              PENDING=$(jq '.numPendingTestSuites' jest-results.json)

              echo "Total: $TOTAL | Passed: $PASSED | Failed: $FAILED | Pending: $PENDING" >> $GITHUB_STEP_SUMMARY
              echo '' >> $GITHUB_STEP_SUMMARY

              jq -r '.testResults[] | "🧪 \(.name)\n✅ Passed: \(.numPassingAsserts) | ❌ Failed: \(.numFailingTests) | ⏤ Skipped: \(.numPendingTests)"' jest-results.json >> $GITHUB_STEP_SUMMARY
          else
              echo '🚫 No test results found.' >> $GITHUB_STEP_SUMMARY
          fi

      # Optional: Send result to Salesforce Webhook
      - name: Notify Salesforce Webhook
        if: always()
        uses: fjogeleit/http-request-action@v1.15.1
        with:
          url: 'https://fullnsa-dev-ed.develop.my.salesforce.com/services/apexrest/github/webhook '
          method: 'POST'
          content-type: 'application/json'
          body: |
            {
              "repository": "${{ github.repository }}",
              "workflow": "${{ github.workflow }}",
              "status": "${{ env.STATUS }}",
              "run_id": "${{ github.run_id }}"
            }
