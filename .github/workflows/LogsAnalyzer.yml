name: Salesforce Logs Analyzer

on:
  workflow_dispatch:
    inputs:
      org_alias:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
env:
  ORG_ALIAS: ${{ github.event.inputs.org_alias }}
  NODE_VERSION: "20"
  LOG_DIR: "sf-logs"

jobs:
  collect-logs:
    name: Setup Environment & Collect Logs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          # Install Salesforce CLI
          npm install --global @salesforce/cli
          sf plugins:update
          sf --version
          
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq
      
      - name: üîê Authenticate to Salesforce Org
        run: |
          if [ -z "${{ secrets.ORG_SFDX_URL }}" ]; then
            echo "‚ùå Error: ORG_SFDX_URL secret is missing"
            exit 1
          fi
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin
          sf org list

      - name: Retrieve Debug Logs (Last 30 Days)
        timeout-minutes: 30
        run: |
          # Calculate start time (30 days ago in UTC)
          START_TIME=$(date -u -d "30 days ago" +'%Y-%m-%dT%H:%M:%SZ')
          echo "Retrieving logs since: $START_TIME"
          
          # Create log directory
          mkdir -p "$LOG_DIR"
          echo "Log directory: $LOG_DIR"
          
          # Initialize counters
          total_logs=0
          page=1
          
          # Start with empty cursor
          cursor=""
          
          # Pagination loop
          while :; do
            echo "Processing page $page..."
            
            # Get log list with error handling
            if ! sf_output=$(sf apex list log \
              --target-org "$ORG_ALIAS" \
              --start-time "$START_TIME" \
              --debug-level "USER_DEBUG,APEX_CODE" \
              --cursor "$cursor" \
              --json 2>&1); then
              
              echo "‚ùå Error listing logs:"
              echo "$sf_output"
              echo "Continuing with logs retrieved so far..."
              break
            fi
            
            # Parse JSON output
            echo "$sf_output" > loglist.json
            
            # Check for valid response
            if ! jq -e '.result' loglist.json >/dev/null; then
              echo "‚ö†Ô∏è Invalid response format. Response content:"
              cat loglist.json
              break
            fi
            
            # Get log IDs
            log_ids=$(jq -r '.result[].id' loglist.json)
            log_count=$(echo "$log_ids" | wc -w)
            
            if [ "$log_count" -eq 0 ]; then
              echo "No more logs found on page $page"
              break
            fi
            
            echo "Found $log_count logs on page $page"
            total_logs=$((total_logs + log_count))
            
            # Download logs in parallel
            echo "$log_ids" | xargs -P 4 -I {} \
              bash -c 'echo "Downloading log {}"; sf apex get log "$1" --target-org "$2" --output-dir "$3" || echo "‚ö†Ô∏è Failed to download log $1"' _ {} "$ORG_ALIAS" "$LOG_DIR"
            
            # Get next cursor
            cursor=$(jq -r '.nextPageUrl // empty' loglist.json)
            
            if [ -z "$cursor" ]; then
              echo "No more pages"
              break
            fi
            
            page=$((page + 1))
          done
          
          echo "‚úÖ Retrieved $total_logs logs total"
          echo "Logs saved to: $LOG_DIR"
      
      - name: Verify Log Retrieval
        run: |
          if [ -z "$(ls -A ${{ env.LOG_DIR }})" ]; then
            echo "No logs retrieved!"
            exit 1
          else
            echo "Retrieved $(ls ${{ env.LOG_DIR }} | wc -l) log files"
          fi

      - name: Archive Logs
        uses: actions/upload-artifact@v4
        with:
          name: salesforce-debug-logs
          path: ${{ env.LOG_DIR }}
        if: ${{ always() }}
