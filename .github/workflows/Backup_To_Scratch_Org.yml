name: Salesforce Org Backup and Analysis

on:
  schedule:
    - cron: '0 10 1 * *'  # Runs at 10 AM on the first of each month
  
  workflow_dispatch:
    inputs:
      commit_message:
        type: string
        required: true
        description: 'Commit message for the backup'
        default: 'Monthly Org Backup'
      scratch_duration:
        type: choice
        description: 'Scratch org duration (days)'
        options:
          - '1'
          - '7'
          - '30'
        default: '1'
        required: true

env:
  ORG_ALIAS: backup_org
  PROJECT_DIR: orgBackup
  METADATA_DIR: force-app
  TEST_RESULTS_DIR: test-results
  DATA_BACKUP_DIR: data-backup
  NODE_VERSION: '20'

jobs:
  backup_and_analyze:
    runs-on: ubuntu-latest
    
    steps:
      - name: Log Context Information
        run: |
          echo "Workflow Details:"
          echo "- Triggered by: ${{ github.actor }}"
          echo "- Event: ${{ github.event_name }}"
          echo "- Repository: ${{ github.repository }}"
          echo "- Branch: ${{ github.ref }}"
          echo "- Runner OS: ${{ runner.os }}"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: |
          # Install system dependencies
          sudo apt-get update
          sudo apt-get install -y xmlstarlet

          # Install Salesforce CLI and plugins
          npm install @salesforce/cli --global
          echo "Y" | sf plugins install texei-sfdx-plugin
          npm install junit-viewer -g

      - name: Authenticate to Salesforce
        run: |
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url \
            --alias ${{ env.ORG_ALIAS }} \
            --set-default \
            --sfdx-url-stdin

      - name: Setup Project Structure
        run: |
          # Create project if it doesn't exist
          if [ ! -d "./${{ env.PROJECT_DIR }}/${{ env.METADATA_DIR }}" ]; then
            sf project generate --name ${{ env.PROJECT_DIR }} --manifest
          fi
          
          # Copy package.xml if exists
          if [ -f "./config/package.xml" ]; then
            cp ./config/package.xml ./${{ env.PROJECT_DIR }}/manifest/
          fi

      - name: Retrieve Metadata
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          sf project retrieve start \
            --target-org ${{ env.ORG_ALIAS }} \
            --manifest manifest/package.xml

      - name: Run Test Classes
        id: run-tests
        run: |
          # Create test results directory
          mkdir -p "${{ env.PROJECT_DIR }}/${{ env.TEST_RESULTS_DIR }}"
          
          # Find and run test classes
          TEST_DIR="${{ env.PROJECT_DIR }}/${{ env.METADATA_DIR }}/main/default/classes"
          if [ -d "$TEST_DIR" ]; then
            for test_file in $TEST_DIR/*TEST*.cls-meta.xml; do
              if [ -f "$test_file" ]; then
                test_name=$(basename "$test_file" .cls-meta.xml)
                echo "Running test: $test_name"
                sf apex run test \
                  --synchronous \
                  --class-names "$test_name" \
                  --codecoverage \
                  --detailedcoverage \
                  --result-format junit \
                  --output-dir "${{ env.PROJECT_DIR }}/${{ env.TEST_RESULTS_DIR }}"
              fi
            done
          else
            echo "No test classes found in $TEST_DIR"
          fi

      - name: Generate Test Report
        if: always()
        run: |
          echo "# Apex Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Process test results and create markdown report
          for result_file in ${{ env.PROJECT_DIR }}/${{ env.TEST_RESULTS_DIR }}/*.xml; do
            if [ -f "$result_file" ]; then
              # Extract test class name
              class_name=$(basename "$result_file" .xml)
              echo "## $class_name" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Extract and format test results using xmlstarlet
              echo "### Test Results" >> $GITHUB_STEP_SUMMARY
              echo "| Test Method | Status | Time (s) |" >> $GITHUB_STEP_SUMMARY
              echo "|------------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
              
              xmlstarlet sel -t \
                -m "//testcase" \
                -v "concat('| ', @name, ' | ', 
                    if (failure) then '❌ Failed' else '✅ Passed',
                    ' | ', format-number(@time, '#.###'), ' |')" \
                -n "$result_file" >> $GITHUB_STEP_SUMMARY
              
              # Extract coverage information if available
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Coverage Details" >> $GITHUB_STEP_SUMMARY
              
              covered=$(xmlstarlet sel -t -v "//coverage/@covered" "$result_file" || echo "0")
              total=$(xmlstarlet sel -t -v "//coverage/@total" "$result_file" || echo "0")
              
              if [ "$total" != "0" ]; then
                coverage=$((covered * 100 / total))
                echo "Coverage: ${coverage}% ($covered/$total lines)" >> $GITHUB_STEP_SUMMARY
              else
                echo "No coverage information available" >> $GITHUB_STEP_SUMMARY
              fi
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "---" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Add summary footer
          echo "Report generated on $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Export Org Data
        run: |
          mkdir -p "${{ env.PROJECT_DIR }}/${{ env.DATA_BACKUP_DIR }}"
          sf texei:data:export \
            --objects "Account,Contact" \
            --outputdir "${{ env.PROJECT_DIR }}/${{ env.DATA_BACKUP_DIR }}"

      - name: Create Scratch Org
        if: github.event_name == 'workflow_dispatch'
        env:
          OWNER_EMAIL: ${{ github.event.sender.email }}
        run: |
          if [ -f "./config/project-scratch-def.json" ]; then
           echo "Creating Scratch Org"
           # sf org create scratch \
           #   --definition-file "./config/project-scratch-def.json" \
           #   --alias "backup-${{ github.run_id }}" \
           #   --duration-days ${{ github.event.inputs.scratch_duration }} \
           #   --admin-email "$OWNER_EMAIL"
          else
            echo "Warning: project-scratch-def.json not found"
          fi

      - name: Commit Changes
        run: |
          # Configure git
          git config user.email "${{ github.event.sender.email }}"
          git config user.name "${{ github.actor }}"
          
          # Stage and check for changes
          git add .
          if ! git diff-index --quiet HEAD --; then
            git commit -m "${{ github.event.inputs.commit_message }} - $(date +'%Y-%m-%d')"
            git push origin ${{ github.ref }}
          else
            echo "No changes to commit"
          fi

      - name: Cleanup
        if: always()
        run: |
          # Logout from orgs
          sf org logout --all --no-prompt
          
          # Clean up temporary files
          rm -rf .sf
