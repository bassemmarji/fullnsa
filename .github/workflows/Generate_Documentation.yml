name: AI-Powered Apex Documentation Generator

on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}

jobs:
  generate_docs:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: üèóÔ∏è Setup Environment
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Install Dependencies
        run: |
          # Install Salesforce CLI
          npm install --global @salesforce/cli@latest
          sf plugins:install @salesforce/plugin-apex@latest
          
      - name: ü¶ô Install & Configure Ollama
        run: |
          # Install with auto-start
          curl -fsSL https://ollama.com/install.sh | sh
          
          # Configure systemd service (more reliable than nohup)
          sudo tee /etc/systemd/system/ollama.service <<EOF
          [Unit]
          Description=Ollama Service
          After=network-online.target

          [Service]
          ExecStart=/usr/local/bin/ollama serve
          User=root
          Group=root
          Restart=always
          RestartSec=3
          Environment="OLLAMA_HOST=0.0.0.0"
          Environment="OLLAMA_MODELS=$HOME/.ollama/models"

          [Install]
          WantedBy=multi-user.target
          EOF

          # Start and enable service
          sudo systemctl daemon-reload
          sudo systemctl enable ollama
          sudo systemctl start ollama
          sleep 10  # Wait for service initialization

          # Verify service status
          if ! systemctl is-active --quiet ollama; then
            echo "‚ùå Failed to start Ollama service"
            journalctl -u ollama -b --no-pager | tail -n 20
            exit 1
          fi

          # Pull model with retries
          for i in {1..3}; do
            if ollama pull deepseek-coder:6.7b; then
              break
            else
              echo "‚ö†Ô∏è Pull attempt $i failed, retrying..."
              sleep 10
            fi
          done

      - name: ü©∫ Health Check Ollama
        run: |
          # Verify server responsiveness
          if ! curl -s http://localhost:11434 >/dev/null; then
            echo "‚ùå Ollama server not responding"
            sudo systemctl restart ollama
            sleep 15
          fi

          # Final verification
          if ! ollama list >/dev/null; then
            echo "‚ùå Ollama still not responding after restart"
            exit 1
          fi

      - name: üîê Authenticate to Salesforce Org
        env:
          SFDX_URL: ${{ secrets.ORG_SFDX_URL }}
        run: |
          if [ -z "$SFDX_URL" ]; then
            echo "‚ùå Error: SFDX_URL environment variable is empty"
            exit 1
          fi
          
          echo "$SFDX_URL" | sf org login sfdx-url \
            --alias $ORG_ALIAS \
            --set-default \
            --sfdx-url-stdin
          
          sf org display
      
      - name: üì¶ Retrieve Metadata
        run: |
          # Create full project structure
          sf project generate --name "org-metadata" --manifest
          cd ./org-metadata
          
          # Create package.xml
          mkdir -p manifest
          cat <<EOF > manifest/package.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <Package xmlns="http://soap.sforce.com/2006/04/metadata">
            <types>
              <members>*</members>
              <name>ApexClass</name>
            </types>
            <version>59.0</version>
          </Package>
          EOF

          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml
          
      - name: üìù Generate Markdown Docs
        run: |
          # Create output directory
          mkdir -p generated-docs
      
          # Verify classes exist
          if [ ! -d "org-metadata/force-app/main/default/classes" ]; then
            echo "‚ùå Error: No classes found in org-metadata/force-app"
            exit 1
          fi
      
          # Process first 5 classes
          for CLASS_FILE in $(find org-metadata/force-app/main/default/classes -name '*.cls' ! -name '*Test.cls' | head -n 5); do
            CLASS=$(basename "$CLASS_FILE" .cls)
            echo "üìÑ Processing $CLASS.cls"
      
            # Get sanitized content (4000 chars max)
            CONTENT=$(head -c 4000 "$CLASS_FILE" | sed '/\/\*/,/\*\//d' | sed 's/\/\/.*$//')
      
            # Generate with retries
            for ATTEMPT in {1..3}; do
              echo "Attempt $ATTEMPT/3: Generating docs for $CLASS"
              
              # Using simple echo for prompt (YAML-safe)
              PROMPT="Generate professional Markdown documentation for Salesforce Apex class $CLASS using this exact structure:
              # $CLASS
          
              ## Overview
              [1-2 sentence class purpose]
          
              ## Methods
              [For each public/protected method:]
          
              ### methodName()
              **Description:** [Functionality]
              **Parameters:**
              - param1 (Type): [Description]
              - param2 (Type): [Description]
              **Returns:** [Return type description]
              **Example:**
              \`\`\`apex
              // Apex example only
              [Code]
              \`\`\`
          
              ## Usage Notes
              [Important implementation details]
          
              STRICT REQUIREMENTS:
              1. Only use Apex code examples (NO Java/JavaScript)
              2. Never include introductory text
              3. Maintain this exact format
              4. Document all public/protected methods
          
              Class content:
              $CONTENT"
          
              echo "$PROMPT" | ollama run deepseek-coder:6.7b > "generated-docs/${CLASS}.md"
      
              # Verify output
              if [ -s "generated-docs/${CLASS}.md" ] && grep -q "AI-Generated" "generated-docs/${CLASS}.md"; then
                echo "‚úÖ Successfully generated $CLASS.md"
                break
              else
                echo "‚ö†Ô∏è Attempt $ATTEMPT failed"
                sleep 5
              fi
            done
      
            # Final failure check
            if [ ! -s "generated-docs/${CLASS}.md" ]; then
              echo "‚ùå Failed after 3 attempts - creating empty file"
              echo "# Failed to generate docs for $CLASS" > "generated-docs/${CLASS}.md"
            fi
      
            sleep 5 # Rate limit
          done
          
      - name: üì§ Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: apex-documentation
          path: |
            generated-docs/
          retention-days: 7

      - name: üìä Generate Summary
        run: |
          echo "## Documentation Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "Generated Markdown for:" >> $GITHUB_STEP_SUMMARY
          ls generated-docs/*.md | xargs -n 1 basename | sed 's/\.md//' | while read CLASS; do
            echo "- \`$CLASS\`" >> $GITHUB_STEP_SUMMARY
          done
