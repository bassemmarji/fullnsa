name: AI-Powered Apex Documentation Generator

on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}

jobs:
  generate_docs:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: üèóÔ∏è Setup Environment
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Install Dependencies
        run: |
          # Install Salesforce CLI
          npm install --global @salesforce/cli@latest
          sf plugins:install @salesforce/plugin-apex@latest
          
      - name: ü¶ô Install & Configure Ollama
        run: |
          # Install with auto-start
          curl -fsSL https://ollama.com/install.sh | sh
          
          # Configure systemd service (more reliable than nohup)
          sudo tee /etc/systemd/system/ollama.service <<EOF
          [Unit]
          Description=Ollama Service
          After=network-online.target

          [Service]
          ExecStart=/usr/local/bin/ollama serve
          User=root
          Group=root
          Restart=always
          RestartSec=3
          Environment="OLLAMA_HOST=0.0.0.0"
          Environment="OLLAMA_MODELS=$HOME/.ollama/models"

          [Install]
          WantedBy=multi-user.target
          EOF

          # Start and enable service
          sudo systemctl daemon-reload
          sudo systemctl enable ollama
          sudo systemctl start ollama
          sleep 10  # Wait for service initialization

          # Verify service status
          if ! systemctl is-active --quiet ollama; then
            echo "‚ùå Failed to start Ollama service"
            journalctl -u ollama -b --no-pager | tail -n 20
            exit 1
          fi

          # Pull model with retries
          for i in {1..3}; do
            if ollama pull deepseek-coder:6.7b; then
              break
            else
              echo "‚ö†Ô∏è Pull attempt $i failed, retrying..."
              sleep 10
            fi
          done

      - name: ü©∫ Health Check Ollama
        run: |
          # Verify server responsiveness
          if ! curl -s http://localhost:11434 >/dev/null; then
            echo "‚ùå Ollama server not responding"
            sudo systemctl restart ollama
            sleep 15
          fi

          # Final verification
          if ! ollama list >/dev/null; then
            echo "‚ùå Ollama still not responding after restart"
            exit 1
          fi

      - name: üîê Authenticate to Salesforce Org
        env:
          SFDX_URL: ${{ secrets.ORG_SFDX_URL }}
        run: |
          if [ -z "$SFDX_URL" ]; then
            echo "‚ùå Error: SFDX_URL environment variable is empty"
            exit 1
          fi
          
          echo "$SFDX_URL" | sf org login sfdx-url \
            --alias $ORG_ALIAS \
            --set-default \
            --sfdx-url-stdin
          
          sf org display
      
      - name: üì¶ Retrieve Metadata
        run: |
          # Create org-metadata directory
          mkdir -p org-metadata/manifest
          
          # Generate package.xml for Apex classes
          cat <<EOF > org-metadata/manifest/package.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <Package xmlns="http://soap.sforce.com/2006/04/metadata">
            <types>
              <members>*</members>
              <name>ApexClass</name>
            </types>
            <version>59.0</version>
          </Package>
          EOF
          
          # Retrieve metadata
          cd org-metadata
          sf project retrieve start \
            --manifest manifest/package.xml \
            --target-org $ORG_ALIAS

      - name: üìù Generate Markdown Docs
        run: |
          mkdir -p generated-docs
          
          # Process first 5 classes
          for CLASS_FILE in $(find org-metadata/force-app/main/default/classes -name '*.cls' ! -name '*Test.cls' | head -n 5); do
            CLASS=$(basename "$CLASS_FILE" .cls)
            echo "üìÑ Generating docs for $CLASS"
            
            # Get class content (limited to 4000 chars)
            CONTENT=$(head -c 4000 "$CLASS_FILE" | sed 's/\/\/.*$//g' | sed '/\/\*/,/\*\//d')
            
            # Generate Markdown documentation
            PROMPT=$(cat <<PROMPT
            Generate comprehensive Markdown documentation for Salesforce Apex class: ${CLASS}
            
            Include:
            1. Class purpose overview
            2. All public/protected methods with parameters and return values
            3. Usage examples
            4. Error handling details
            5. "## AI-Generated Documentation" header at top
            
            Class content:
            ${CONTENT}
            PROMPT
            )
            
            echo "$PROMPT" | ollama run deepseek-coder:6.7b > "generated-docs/${CLASS}.md"
            sleep 10 # Rate limit
          done

      - name: üì§ Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: apex-documentation
          path: |
            generated-docs/
            org-metadata/
          retention-days: 7

      - name: üìä Generate Summary
        run: |
          echo "## Documentation Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "Generated Markdown for:" >> $GITHUB_STEP_SUMMARY
          ls generated-docs/*.md | xargs -n 1 basename | sed 's/\.md//' | while read CLASS; do
            echo "- \`$CLASS\`" >> $GITHUB_STEP_SUMMARY
          done
