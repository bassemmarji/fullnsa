name: AI-Powered Apex Documentation Generator

on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
      DOC_FORMAT:
        type: choice
        description: "Documentation format"
        options: ["ApexDoc", "Markdown", "Both"]
        required: true
        default: "ApexDoc"

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}
  DOC_FORMAT: ${{ github.event.inputs.DOC_FORMAT }}

jobs:
  generate_docs:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: üèóÔ∏è Setup Environment
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Install Tools
        run: |
          # Install Salesforce CLI
          npm install --global @salesforce/cli@latest
          sf plugins:install @salesforce/plugin-apex@latest
          
          # Install Ollama
          curl -fsSL https://ollama.com/install.sh | sh
          ollama pull deepseek-coder:6.7b
          
          # Start Ollama server with 2GB memory limit
          nohup ollama serve > /dev/null 2>&1 &
          sleep 20
          ollama list

      - name: üîê Auth to Salesforce Org
        run: |
          echo "${{ secrets.SFDX_URL }}" | sf org login sfdx-url \
            --alias $ORG_ALIAS \
            --set-default \
            --sfdx-url-stdin
          sf org display --verbose

      - name: üì• Retrieve Apex Classes
        run: |
          sf project retrieve start \
            --metadata-type ApexClass \
            --target-org $ORG_ALIAS

      - name: üîç Select Classes for Documentation
        id: class_selection
        run: |
          CLASSES=$(find force-app/main/default/classes -name '*.cls' ! -name '*Test.cls' | \
                   head -n 5 | \
                   xargs -n 1 basename | \
                   sed 's/\.cls//' | \
                   tr '\n' ' ')
          
          echo "Selected classes: $CLASSES"
          echo "classes=$CLASSES" >> $GITHUB_OUTPUT

      - name: üìù Generate AI Documentation
        if: ${{ steps.class_selection.outputs.classes != '' }}
        env:
          OLLAMA_MODEL: "deepseek-coder:6.7b"
        run: |
          mkdir -p generated-docs/{apexdoc,markdown}
          
          for CLASS in ${{ steps.class_selection.outputs.classes }}; do
            echo "üìÑ Processing $CLASS.cls"
            
            # Get sanitized class content (limit to 4000 chars)
            CONTENT=$(head -c 4000 "force-app/main/default/classes/${CLASS}.cls" | \
                      sed 's/\/\*.*\*\///g' | \
                      sed 's/\/\/.*$//g')
            
            # ---- ApexDoc Generation ----
            if [[ "$DOC_FORMAT" == "ApexDoc" || "$DOC_FORMAT" == "Both" ]]; then
              PROMPT=$(cat <<EOF
              Generate ApexDoc documentation for this Salesforce Apex class.
              Follow these rules:
              1. Use proper ApexDoc tags: @description, @author, @date, @param, @return, @throws
              2. Include a 1-2 sentence class overview
              3. Document all public/protected methods
              4. Add usage examples where applicable
              5. Include "@generated This documentation was auto-generated by AI"
              
              Class: ${CLASS}.cls
              Code:
              ${CONTENT}
              
              Output ONLY the documentation block starting with /** and ending with */.
              EOF
              )
              
              echo "üîÑ Generating ApexDoc for $CLASS..."
              ollama run $OLLAMA_MODEL "$PROMPT" > "generated-docs/apexdoc/${CLASS}.cls"
              sleep 10
            fi
            
            # ---- Markdown Generation ----
            if [[ "$DOC_FORMAT" == "Markdown" || "$DOC_FORMAT" == "Both" ]]; then
              PROMPT=$(cat <<EOF
              Generate comprehensive Markdown documentation for this Salesforce Apex class.
              Include:
              1. Class purpose overview
              2. Method details with parameters/returns
              3. Code examples
              4. Error handling
              5. "‚ö†Ô∏è AI-Generated Documentation" header
              
              Class: ${CLASS}.cls
              Code:
              ${CONTENT}
              EOF
              )
              
              echo "üîÑ Generating Markdown for $CLASS..."
              ollama run $OLLAMA_MODEL "$PROMPT" > "generated-docs/markdown/${CLASS}.md"
              sleep 15
            fi
          done

      - name: ‚ú® Post-Processing
        if: ${{ steps.class_selection.outputs.classes != '' }}
        run: |
          # Add headers to generated files
          find generated-docs -type f -name "*.cls" -exec sed -i '1i /**' {} \;
          find generated-docs -type f -name "*.cls" -exec sed -i '$a */' {} \;
          
          # Format markdown files
          find generated-docs -type f -name "*.md" -exec sed -i '1i # ‚ö†Ô∏è AI-Generated Documentation\n' {} \;

      - name: üì§ Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apex-documentation
          path: generated-docs/
          retention-days: 7

      - name: üìä Generate Report
        if: always()
        run: |
          echo "## üìã Documentation Generation Report" >> $GITHUB_STEP_SUMMARY
          echo "| Class | ApexDoc | Markdown |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          
          for CLASS in ${{ steps.class_selection.outputs.classes }}; do
            APEXDOC_STATUS="‚ùå"
            MD_STATUS="‚ùå"
            
            [ -f "generated-docs/apexdoc/${CLASS}.cls" ] && APEXDOC_STATUS="‚úÖ"
            [ -f "generated-docs/markdown/${CLASS}.md" ] && MD_STATUS="‚úÖ"
            
            echo "| \`${CLASS}\` | ${APEXDOC_STATUS} | ${MD_STATUS} |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download artifacts for review" >> $GITHUB_STEP_SUMMARY
          echo "2. For ApexDoc: Copy comments into source files" >> $GITHUB_STEP_SUMMARY
          echo "3. For Markdown: Add to your documentation repository" >> $GITHUB_STEP_SUMMARY
