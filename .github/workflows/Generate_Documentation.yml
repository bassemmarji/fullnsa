name: Generate Class Documentation with Ollama (DeepSeek)

on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Alias for the Salesforce org"
        required: true
        default: "orgAlias"
      MAX_CLASSES:
        type: number
        description: "Maximum number of classes to document (1-10)"
        required: false
        default: 5

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}
  MAX_CLASSES: ${{ github.event.inputs.MAX_CLASSES }}
  
jobs:
  generate_documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ⚡ Install Dependencies
        run: |
          # Install Salesforce CLI
          npm install --global @salesforce/cli
          npm update --global @salesforce/cli
          sf plugins:update
          sf --version
          
          # Install jq for JSON processing
          sudo apt-get install -y jq

      - name: 🧠 Install Ollama And Pull DeepSeek Model (6.7B)
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          nohup ollama serve > /dev/null 2>&1 &
          sleep 15  # Give it more time to start
          ollama pull deepseek-coder:6.7b
          ollama list

      - name: 🔐 Authenticate to Salesforce Org
        run: |
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin
          sf org list
          
      - name: 📦 Retrieve Org Metadata
        run: |
          sf project generate --name "org-metadata" --manifest

          if [ -f "./config/package.xml" ]; then
            echo "Found custom package.xml"
            cp ./config/package.xml ./org-metadata/manifest
          fi

          cd ./org-metadata
          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml

      - name: 🔍 Find First 5 Apex Classes
        id: find_classes
        run: |
          SRC_DIR="$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes"
          CLASSES=""
          COUNT=0
      
          # Find first 5 classes (excluding tests)
          for FILE in $(find "$SRC_DIR" -name '*.cls' ! -name '*Test.cls' | sort | head -n $MAX_CLASSES); do
            CLASS=$(basename "$FILE" .cls)
            echo "Selected class: $CLASS"
            CLASSES="$CLASSES $CLASS"
            COUNT=$((COUNT+1))
          done
      
          echo "Selected $COUNT classes: $CLASSES"
          echo "classes=$CLASSES" >> $GITHUB_OUTPUT
          
      - name: 📝 Generate Class Documentation Using Ollama
        if: ${{ steps.find_classes.outputs.classes != '' }}
        shell: bash
        run: |
          SRC_DIR="$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes"
          DOCS_DIR="$GITHUB_WORKSPACE/generated-docs"
          mkdir -p "$DOCS_DIR"
          
          for CLASS in ${{ steps.find_classes.outputs.classes }}; do
            echo "Generating documentation for: $CLASS"
            
            # Get the class content with character limit
            CLASS_CONTENT=$(head -c 3000 "$SRC_DIR/${CLASS}.cls")
            
            PROMPT="Generate comprehensive documentation for the following Salesforce Apex class: ${CLASS}.cls
            
            Class content:
            ${CLASS_CONTENT}
      
            Documentation requirements:
            1. Start with a 1-2 sentence overview of the class purpose
            2. Document each method including:
               - Purpose/functionality
               - Parameters (name, type, description)
               - Return values (type, description)
               - Any exceptions thrown
            3. Include usage examples if applicable
            4. Format using Markdown with clear section headers
            5. Include any important implementation notes
            6. Document class properties if present
      
            Output only the documentation without additional commentary."
      
            # Generate documentation with timeout and retries
            MAX_RETRIES=2
            ATTEMPT=0
            SUCCESS=false
            
            while [ $ATTEMPT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
              ATTEMPT=$((ATTEMPT+1))
              echo "Attempt $ATTEMPT of $MAX_RETRIES"
              
              RESPONSE=$(timeout 180 ollama run deepseek-coder:6.7b "$PROMPT" | \
                       sed '/```markdown/d' | \
                       sed '/```/d' | \
                       grep -v '^[[:space:]]*$' || true)
              
              # Validate response contains key elements
              if [[ "$RESPONSE" == *"## Overview"* ]] && 
                 [[ "$RESPONSE" == *"## Methods"* ]] && 
                 [[ "$RESPONSE" == *"${CLASS}"* ]]; then
                SUCCESS=true
                echo "$RESPONSE" > "$DOCS_DIR/${CLASS}.md"
                echo "✅ Successfully generated documentation for $CLASS"
              else
                echo "⚠️ Documentation generation attempt $ATTEMPT failed or incomplete"
                sleep 10 # Wait before retry
              fi
            done
            
            if [ "$SUCCESS" = false ]; then
              echo "❌ Failed to generate valid documentation after $MAX_RETRIES attempts"
              echo "# Documentation generation failed for ${CLASS}" > "$DOCS_DIR/${CLASS}.md"
            fi
            
            # Add delay between generations
            echo "Waiting 15 seconds before next class..."
            sleep 15
          done

      - name: 📦 Upload Generated Documentation
        if: ${{ steps.find_classes.outputs.classes != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: generated-class-docs
          path: generated-docs/
          retention-days: 7

      - name: 📝 Create Summary Report
        if: ${{ steps.find_classes.outputs.classes != '' }}
        run: |
          echo "## 📚 Class Documentation Generation Report" >> $GITHUB_STEP_SUMMARY
          echo "### Processed Classes" >> $GITHUB_STEP_SUMMARY
          echo "| Class Name | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          DOCS_DIR="$GITHUB_WORKSPACE/generated-docs"
          for CLASS in ${{ steps.find_classes.outputs.classes }}; do
            if [ -f "$DOCS_DIR/${CLASS}.md" ]; then
              if grep -q "generation failed" "$DOCS_DIR/${CLASS}.md"; then
                echo "| \`${CLASS}\` | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| \`${CLASS}\` | ✅ Success |" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "| \`${CLASS}\` | ⚠️ Missing |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Download generated documentation from Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Review and refine documentation as needed" >> $GITHUB_STEP_SUMMARY
          echo "- Commit to your documentation repository" >> $GITHUB_STEP_SUMMARY
