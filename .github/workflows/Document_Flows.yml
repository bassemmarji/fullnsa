name: Document Flows

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday at midnight

env:
  ORG_ALIAS: org_alias
  REPORT_RECIPIENT: "bassemmarji@gmail.com"
  
jobs:
  document_org_flows:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Install Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 'Install Salesforce CLI'
        run: npm install @salesforce/cli --global

      - name: 'Install flowdoc Plugin'
        run: echo "Y" | sf plugins:install sfdx-flowdoc-plugin

      - name: 'Install jq'
        run: echo "Y" | sudo apt-get update && sudo apt-get install -y jq

      - name: 'Authorize to the Org'
        run: echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin

      #- name: 'Create project with manifest, Navigate to the project folder, Download metadata using SFDX'
      #  run: |
      #    sf project generate --name "org-metadata"  --manifest
      #    cd "./org-metadata"
      #    sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml

      - name: 'Create project with manifest, Navigate to the project folder, Download metadata using SFDX'
        run: |
          # Generate project and manifest
          sf project generate --name "org-metadata" --manifest
          
          if test -f "./config/package.xml"; then
             echo "./config/package.xml file exists"
             cp ./config/package.xml ./org-metadata/manifest
          fi
          
          cd "./org-metadata"
          
          # Retrieve metadata (now including flows)
          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml
          
      - name: 'List Retrieved Flows'
        run: |
          cd $GITHUB_WORKSPACE/org-metadata
          echo "ðŸ“„ Listing retrieved flows:"
          find force-app/main/default/flows -name "*.flow-meta.xml" | sed 's/.*\///; s/\..*/ /'
          
      - name: 'Run Flow Documenter'
        run: |
          # Create directories
          mkdir -p $GITHUB_WORKSPACE/flowDocuments
          
          # Ensure we're authenticated
          sf org list

          # Navigate to SFDX project
          cd $GITHUB_WORKSPACE/org-metadata

          # Run query and handle errors
          QUERY_RESULT=$(sf data query --query "SELECT ApiName FROM FlowDefinitionView ORDER BY LastModifiedDate DESC LIMIT 10" --target-org $ORG_ALIAS --json)
    
          # Debug: Print raw query result
          #echo "Query Result: $QUERY_RESULT"

          # Extract flow names or fail
          if echo "$QUERY_RESULT" | jq -e '.result' > /dev/null; then
             echo "$QUERY_RESULT" | jq -r '.result.records[].ApiName' > top_flows.txt
             echo "Flows to document:"
             cat top_flows.txt
          else
             echo "Error in query:"
             echo "$QUERY_RESULT" | jq '.message'
             exit 1
          fi

          #cd "./org-metadata/force-app/main/default/flows"
          echo "Current directory: $(pwd)"
          ls -la "$GITHUB_WORKSPACE/org-metadata"
          ls -la "$GITHUB_WORKSPACE/org-metadata/force-app/main/default/flows"

          # Check list of flows available locally:
          #find $GITHUB_WORKSPACE/org-metadata/force-app/main/default/flows -name "*.flow-meta.xml" | sed 's/.*\///; s/\..*/ /'

          #sf flowdoc pdf generate "Assign_tasks_to_Queue" -u $ORG_ALIAS -o $GITHUB_WORKSPACE/flowDocuments
          #sf flowdoc pdf generate Assign_tasks_to_Queue -o $GITHUB_WORKSPACE/flowDocuments

          # Generate PDFs
          while read flow; do
                echo "Generating PDF for: $flow"
                cd $GITHUB_WORKSPACE/org-metadata
                sf flowdoc pdf generate "$flow" -u $ORG_ALIAS -o $GITHUB_WORKSPACE/flowDocuments && \
                   echo "âœ… Successfully generated PDF for $flow"
          done < top_flows.txt
          
      - name: 'List Generated Files'
        run: |
          echo "ðŸ“„ Listing files in flowDocuments:"
          ls -la $GITHUB_WORKSPACE/flowDocuments


      # Extract the git author email and store it in the global variable owner_email
      - name: 'Save repository owner email'
        run: |
         echo "owner_email=$(git log -n 1 --pretty=format:%ae )" >> $GITHUB_ENV

      # Create a new git repository
      # Change the email address you associate with your Git commits. The new email address you set will be visible in any future commits you push to GitHub from the command line.
      # Change the name you associate with your Git commits.
      # Add the entire directory to your commit recursively.
      # Determine if there are uncommitted changes in the GIT Tree
      - name: 'Stage files and check for modified files'
        id: git-check
        run: |
         git init
         git config user.email "${{ env.owner_email }}"
         git config user.name "${{ github.repository_owner }}"
         git add .
         echo "modified=$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)" >> $GITHUB_OUTPUT
         
      # If there are uncommitted changes.
      #  Commit a snapshot of all changes in the working directory. This only includes modifications to be tracked files (those that have been added with git add at some point in their history).
      # git push sync the local repository with its associated remote repository and updates it.
      - name: 'Commit and push if there are modified files'
        if: steps.git-check.outputs.modified == 'true'
        run: |
         git commit -m "${{ github.event.inputs.commit_message }} on ${{ github.event.repository.updated_at }}"
         echo "git-push=$(git push -u origin main)\n" >> $GITHUB_OUTPUT          
