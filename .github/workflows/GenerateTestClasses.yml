name: AI Powered Apex Tests Generator with (Qwen-Coder)

on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
      CLASS_NAME:
        type: string
        description: "Name of the Apex class to generate documentation for"
        required: true
        default: "GitHubActionTrigger"

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}
  CLASS_NAME: ${{ github.event.inputs.CLASS_NAME }}

jobs:
  generate_test_class:
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ‚ö° Install Dependencies
        run: |
          # Install Salesforce CLI
          npm install --global @salesforce/cli
          sf plugins:update
          sf --version
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq

      - name: üß† Install Ollama And Pull Qwen-Coder Model
        run: |
          curl -fsSL https://ollama.com/install.sh  | sh
          nohup ollama serve > /dev/null 2>&1 &
          
          # Wait for Ollama to be ready
          for i in {1..30}; do
            if ollama list | grep -q "qwen"; then
              echo "Ollama is ready."
              break
            fi
            echo "Waiting for Ollama... ($i/30)"
            sleep 5
          done
      
          # ‚úÖ Use a valid model name
          ollama pull qwen2:7b
    
      - name: üîê Authenticate to Salesforce Org
        run: |
          if [ -z "${{ secrets.ORG_SFDX_URL }}" ]; then
            echo "‚ùå Error: ORG_SFDX_URL secret is missing"
            exit 1
          fi
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin
          sf org list

      - name: üì¶ Retrieve Org Metadata
        run: |
          sf project generate --name "org-metadata" --manifest
          if [ -f "./config/package.xml" ]; then
            echo "Found custom package.xml"
            cp ./config/package.xml ./org-metadata/manifest/
          fi
          cd ./org-metadata
          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml --json | jq '.' || (echo "‚ùå Retrieve failed" && exit 1)


      - name: üì¶ Retrieve Org Metadata
        run: |
          # Create full project structure
          sf project generate --name "org-metadata" --manifest
          cd ./org-metadata
          
          # Create package.xml
          mkdir -p manifest
          cat <<EOF > manifest/package.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <Package xmlns="http://soap.sforce.com/2006/04/metadata">
            <types>
              <members>${{ env.CLASS_NAME }}</members>
              <name>ApexClass</name>
            </types>
            <version>60.0</version>
          </Package>
          EOF
          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml

      - name: ‚úçÔ∏è Generate Test Class Using Ollama
        run: |
          SRC_DIR="$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes"
          GENERATED_DIR="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes"
          mkdir -p "$GENERATED_DIR"

          CLASS="${{ env.CLASS_NAME }}"
          echo "Generating test class for: $CLASS"

          CLASS_CONTENT=$(head -c 3000 "$SRC_DIR/${CLASS}.cls")
          if [ -z "$CLASS_CONTENT" ]; then
            echo "‚ö†Ô∏è Class content is empty or too small, skipping..."
            exit 1
          fi

          PROMPT=$(cat <<EOF
            Write a comprehensive Salesforce Apex test class named ${CLASS}Test for the following Apex class.
            Include proper test setup, positive/negative test cases, and assertions.
            Focus on testing the actual business logic in the class.
            Class to test:
            ${CLASS_CONTENT}
            Test class requirements:
            1. Must start with @isTest annotation
            2. Must include at least 75% code coverage
            3. Must follow Salesforce best practices
            4. Must include proper test data setup
            5. Must verify expected behavior through assertions
            6. Must handle error cases where appropriate
            Output only the Apex code without any explanations or markdown formatting.
            EOF
            )

          RESPONSE=$(timeout 120 ollama run qwen2:7b "$PROMPT" | \
                   sed -n '/@isTest/,/^}/p' | \
                   sed '/```/d' | \
                   grep -v '^\[\[:space:\]\]*//' || true)

          if [[ "$RESPONSE" == *"@isTest"* ]] && [[ "$RESPONSE" == *"class ${CLASS}Test"* ]]; then
            echo "$RESPONSE" > "$GENERATED_DIR/${CLASS}Test.cls"
            cat > "$GENERATED_DIR/${CLASS}Test.cls-meta.xml" << 'EOF'
            <?xml version="1.0" encoding="UTF-8"?>
            <ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
                <apiVersion>60.0</apiVersion>
                <status>Active</status>
            </ApexClass>
            EOF
            echo "‚úÖ Successfully generated test class for $CLASS"
          else
            echo "// Auto-generated test class (failed)" > "$GENERATED_DIR/${CLASS}Test.cls"
            cat > "$GENERATED_DIR/${CLASS}Test.cls-meta.xml" << 'EOF'
            <?xml version="1.0" encoding="UTF-8"?>
            <ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
                <apiVersion>60.0</apiVersion>
                <status>Active</status>
            </ApexClass>
            EOF            
            echo "‚ö†Ô∏è Failed to generate valid test class for $CLASS"
          fi

      - name: ‚úÖ Validate Generated Test Class
        run: |
          GENERATED_DIR="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes"
          CLASS="${{ env.CLASS_NAME }}"
          if ! grep -q "@isTest" "$GENERATED_DIR/${CLASS}Test.cls"; then
            echo "‚ùå Error: Missing @isTest in ${CLASS}Test.cls"
            exit 1
          fi
          if ! grep -q "class ${CLASS}Test" "$GENERATED_DIR/${CLASS}Test.cls"; then
            echo "‚ùå Error: Wrong class name in ${CLASS}Test.cls"
            exit 1
          fi

      - name: üöÄ Deploy Only Generated Test Class
        run: |
          DEPLOY_RESULT=$(sf project deploy start \
            --source-dir "$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes" \
            --target-org $ORG_ALIAS \
            --wait 30 \
            --json || true)

          if echo "$DEPLOY_RESULT" | jq -e '.status == "Failed"' > /dev/null; then
            echo "‚ùå Deployment failed:"
            echo "$DEPLOY_RESULT" | jq '.result.details.componentFailures'
            exit 1
          fi
          echo "‚úÖ Deployment successful"

      - name: üß™ Run Tests for Generated Class
        run: |
          TEST_CLASS="${{ env.CLASS_NAME }}Test"
          TEST_RESULT=$(sf apex run test \
            --tests "$TEST_CLASS" \
            --target-org $ORG_ALIAS \
            --wait 30 \
            --result-format json \
            --code-coverage \
            --json || true)

          echo "Test Results Summary:"
          echo "$TEST_RESULT" | jq '.result.summary'
          if echo "$TEST_RESULT" | jq -e '.result.summary.failures > 0' > /dev/null; then
            echo "‚ùå Some tests failed"
            exit 1
          fi

      - name: üì¶ Upload ONLY Generated Apex Test Class as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-apex-test-class-qwen
          path: generated-tests/force-app/main/default/classes/${{ env.CLASS_NAME }}Test.cls*
          
      - name: üìù Create Test Report
        run: |
          echo "## üß™ Apex Test Generation Report (Qwen-Coder)" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Test Class" >> $GITHUB_STEP_SUMMARY
          echo "| Class Name | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| \`${{ env.CLASS_NAME }}Test.cls\` | ‚úÖ Generated |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment & Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo '${{ toJSON(steps.deploy.outputs) }}' | jq '.' >> $GITHUB_STEP_SUMMARY 2>&1 || echo "No deployment details" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review test class in Artifacts"
          echo "- Check coverage and failures"
          echo "- Refactor if needed"
