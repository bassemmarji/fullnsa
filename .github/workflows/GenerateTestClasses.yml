name: AI Powered Apex Tests Generator with (Qwen-Coder)

on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
      CLASS_NAME:
        type: string
        description: "Name of the Apex class to generate test class for"
        required: true
        default: "GitHubActionTrigger"

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}
  CLASS_NAME: ${{ github.event.inputs.CLASS_NAME }}

jobs:
  generate_test_class:
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ‚ö° Install Dependencies
        run: |
          # Install Salesforce CLI
          npm install --global @salesforce/cli
          sf plugins:update
          sf --version
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq

      - name: üß† Install Ollama And Pull Qwen-Coder Model
        run: |
          curl -fsSL https://ollama.com/install.sh  | sh
          nohup ollama serve > /dev/null 2>&1 &
          
          # Wait for Ollama to be ready
          for i in {1..30}; do
            if ollama list | grep -q "qwen"; then
              echo "Ollama is ready."
              break
            fi
            echo "Waiting for Ollama... ($i/30)"
            sleep 5
          done
      
          # ‚úÖ Use a valid model name
          ollama pull qwen2.5-coder:7b
    
      - name: üîê Authenticate to Salesforce Org
        run: |
          if [ -z "${{ secrets.ORG_SFDX_URL }}" ]; then
            echo "‚ùå Error: ORG_SFDX_URL secret is missing"
            exit 1
          fi
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin
          sf org list
      - name: üì¶ Retrieve Org Metadata
        run: |
          # Create full project structure
          sf project generate --name "org-metadata" --manifest
          cd ./org-metadata
          
          # Create package.xml
          mkdir -p manifest
          cat <<EOF > manifest/package.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <Package xmlns="http://soap.sforce.com/2006/04/metadata">
            <types>
              <members>${{ env.CLASS_NAME }}</members>
              <name>ApexClass</name>
            </types>
            <version>60.0</version>
          </Package>
          EOF
          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml
      - name: ‚úçÔ∏è Generate Test Class Using Ollama
        run: |
          SRC_DIR="$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes"
          GENERATED_DIR="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes"
          mkdir -p "$GENERATED_DIR"
          
          CLASS="GitHubActionTrigger"
          echo "Generating test class for: $CLASS"
          
          # Read limited class content
          CLASS_CONTENT=$(head -c 1500 "$SRC_DIR/${CLASS}.cls")
          if [ -z "$CLASS_CONTENT" ]; then
            echo "‚ö†Ô∏è Class content is empty or too small, skipping..."
            exit 1
          fi
      
          # Create a temporary prompt file to avoid shell parsing issues
          PROMPT_FILE=$(mktemp)
          cat > "$PROMPT_FILE" << 'EOF'
          Write a valid Salesforce Apex test class named GitHubActionTriggerTest for the following Apex class.
          Important rules:
          - Use '@isTest' annotation before the class
          - Output ONLY the Apex code ‚Äî no explanations, markdown, comments, or extra text
          - Do NOT invent fake classes like 'MockHttp' ‚Äî use only real Salesforce types
          - When mocking HTTP callouts:
            - Define a private class that implements 'HttpCalloutMock'
            - Implement 'HttpResponse respond(HTTPRequest req)'
            - Register it with: 'Test.setMock(HttpCalloutMock.class, new YourMockClass())'
          - NEVER use: 'new HttpCalloutMock()', 'new HttpCalloutMock(...)', or instantiate the interface
          - Use 'Test.setMock(HttpCalloutMock.class, ...)' ‚Äî do NOT omit '.class'
          - Do NOT perform DML on Custom Metadata Types (e.g. Settings__mdt) ‚Äî assume they exist or skip
          - Use ONLY these assertion methods:
            - System.assert(Boolean condition, String message)
            - System.assertEquals(Object expected, Object actual, String message)
            - System.assertNotEquals(Object unexpected, Object actual, String message)
          - NEVER use: assertTrue, assertFalse, assertNull, assertNotNull ‚Äî these are NOT valid Apex methods
          - Ensure all methods have proper bodies enclosed in { }
          - Do NOT nest methods or classes incorrectly
          - The entire output must be a single, compilable Apex class
            
          Class to test:
          EOF
            
          # Append the actual class content (safe because not in shell string)
          cat "$SRC_DIR/${CLASS}.cls" >> "$PROMPT_FILE"
            
          cat >> "$PROMPT_FILE" << 'EOF'
          Requirements:
          1. Include @isTest annotation
          2. Include at least one meaningful test method with setup and assertions
          3. Test both positive and negative/exception paths if applicable
          4. Use proper test data setup (avoid inserting __mdt)
          5. Achieve at least 75% code coverage
          6. Follow Salesforce Apex testing best practices
          7. Output ONLY the Apex class definition ‚Äî nothing before or after
          EOF
      
          # Call ollama using the file (no shell injection)
          RESPONSE=$(timeout 900 env TERM=dumb ollama run qwen2.5-coder:7b < "$PROMPT_FILE" 2>/dev/null)
      
          # Clean up
          rm -f "$PROMPT_FILE"
      
          # Clean up response: remove ANSI codes, markdown fences
          RESPONSE=$(echo "$RESPONSE" \
            | sed -E 's/\x1b\[[0-9;]*m?//g' \
            | sed -E 's/^```[a-zA-Z]*\s*//g' \
            | sed -E 's/^```$//g' \
            | sed '/^$/d' \
          )
      
          # Extract only from @isTest to final }
          if echo "$RESPONSE" | grep -q "}"; then
            RESPONSE=$(echo "$RESPONSE" | sed -n '/@isTest/,/\}/p')
          fi
      
          # Count braces and auto-close if needed
          OPEN=$(echo "$RESPONSE" | grep -o "{" | wc -l)
          CLOSE=$(echo "$RESPONSE" | grep -o "}" | wc -l)
          if [ "$OPEN" -gt "$CLOSE" ]; then
            for i in $(seq 1 $((OPEN - CLOSE))); do
              RESPONSE=$(echo "$RESPONSE" | sed '$a}')
            done
          fi
                    
          # Block known bad patterns
          
          # 1. Direct instantiation of HttpCalloutMock
          if echo "$RESPONSE" | grep -i "new *HttpCalloutMock" > /dev/null; then
            echo "‚ùå Detected invalid direct instantiation: new HttpCalloutMock()"
            echo "Context:"
            echo "$RESPONSE" | grep -C 5 -i "new *HttpCalloutMock"
            exit 1
          fi
          
          # 2. Missing .class in Test.setMock
          if echo "$RESPONSE" | grep -i "Test.setMock" | grep -v "HttpCalloutMock\.class" > /dev/null; then
            echo "‚ùå Detected Test.setMock without 'HttpCalloutMock.class'"
            echo "Context:"
            echo "$RESPONSE" | grep -C 5 -i "Test.setMock"
            exit 1
          fi
          
          # 3. DML on Custom Metadata
          if echo "$RESPONSE" | grep -i "DML.*Github_Settings__mdt" > /dev/null; then
            echo "‚ùå Detected DML on Github_Settings__mdt"
            exit 1
          fi
          
          # 4. Invalid assertion methods
          if echo "$RESPONSE" | grep -i "assertNull\|assertTrue\|assertFalse" > /dev/null; then
            echo "‚ùå Detected invalid assertion methods: assertNull, assertTrue, assertFalse"
            exit 1
          fi
          
          # 5. new HttpResponse outside of response() method
          if echo "$RESPONSE" | grep -iq "new *HttpResponse"; then
            printf '%s' "$RESPONSE" | grep -A 10 -B 10 "implements *HttpCalloutMock" | grep -q "respond" > /dev/null 2>&1
            if [ $? -ne 0 ]; then
              echo "‚ùå Detected 'new HttpResponse' outside of HttpCalloutMock.respond() method"
              echo "$RESPONSE" | grep -C 5 -i "new *HttpResponse"
              exit 1
            fi
          fi

          # Final validation using file-based checks (safe)
          echo "$RESPONSE" > /tmp/apex_test_output.cls
          
          if ! grep -q "@isTest" /tmp/apex_test_output.cls; then
            echo "‚ùå Missing @isTest annotation"
            rm -f /tmp/apex_test_output.cls
            exit 1
          fi
          
          if ! grep -q "class ${CLASS}Test" /tmp/apex_test_output.cls; then
            echo "‚ùå Missing expected class name 'class ${CLASS}Test'"
            rm -f /tmp/apex_test_output.cls
            exit 1
          fi
          
          if grep -q "assertTrue\|assertFalse\|assertNull" /tmp/apex_test_output.cls; then
            echo "‚ùå Detected invalid assertion methods: assertTrue, assertFalse, assertNull"
            rm -f /tmp/apex_test_output.cls
            exit 1
          fi
          
          # If all checks pass, proceed
          echo "$RESPONSE" > "$GENERATED_DIR/${CLASS}Test.cls"
          cat > "$GENERATED_DIR/${CLASS}Test.cls-meta.xml" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
              <apiVersion>60.0</apiVersion>
              <status>Active</status>
          </ApexClass>
          EOF
          echo "‚úÖ Successfully generated test class for $CLASS"
          
          # Clean up
          rm -f /tmp/apex_test_output.cls

      - name: üìÑ Output Generated Test Class
        run: |
          GENERATED_TEST_PATH="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes/${{ env.CLASS_NAME }}Test.cls"
          
          if [ -f "$GENERATED_TEST_PATH" ]; then
            echo "üìÑ Generated Test Class: ${{ env.CLASS_NAME }}Test.cls"
            echo "=================================================="
            cat "$GENERATED_TEST_PATH"
            echo "=================================================="
            echo "‚úÖ Successfully printed generated test class"
          else
            echo "‚ùå Error: Generated test class file not found at $GENERATED_TEST_PATH"
            exit 1
          fi
      - name: ‚úÖ Validate Generated Test Class
        run: |
          GENERATED_DIR="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes"
          CLASS="${{ env.CLASS_NAME }}"
          TEST_CLASS_PATH="$GENERATED_DIR/${CLASS}Test.cls"
      
          if [ ! -f "$TEST_CLASS_PATH" ]; then
            echo "‚ùå Error: Generated test class file not found: $TEST_CLASS_PATH"
            exit 1
          fi
      
          if [ ! -s "$TEST_CLASS_PATH" ]; then
            echo "‚ùå Error: Generated test class is empty"
            exit 1
          fi
      
          if ! grep -q "@isTest" "$TEST_CLASS_PATH"; then
            echo "‚ùå Error: Missing @isTest in ${CLASS}Test.cls"
            cat "$TEST_CLASS_PATH"
            exit 1
          fi
      
          if ! grep -q "class ${CLASS}Test" "$TEST_CLASS_PATH"; then
            echo "‚ùå Error: Missing expected class name"
            cat "$TEST_CLASS_PATH"
            exit 1
          fi
    
      - name: üöÄ Deploy Only Generated Test Class
        run: |
          GENERATED_TEST_CLASS="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes/${{ env.CLASS_NAME }}Test.cls"
          
          if [ ! -f "$GENERATED_TEST_CLASS" ]; then
            echo "‚ùå Generated test class not found: $GENERATED_TEST_CLASS"
            exit 1
          fi
      
          # üî¥ Copy the generated test class into the org-metadata project
          echo "üì¶ Copying generated test class into org-metadata project..."
          cp "$GENERATED_TEST_CLASS" "$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes/"
          cp "$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes/${{ env.CLASS_NAME }}Test.cls-meta.xml" \
             "$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes/"
      
          # üî¥ Change into the org-metadata directory (valid SFDX project)
          cd "$GITHUB_WORKSPACE/org-metadata"
      
          echo "üöÄ Deploying test class: ${{ env.CLASS_NAME }}Test.cls"
          
          DEPLOY_RESULT=$(sf project deploy start \
            --source-dir "force-app/main/default/classes/${{ env.CLASS_NAME }}Test.cls" \
            --target-org "$ORG_ALIAS" \
            --wait 120 \
            --json \
            || true)
      
          if echo "$DEPLOY_RESULT" | jq -e '.status != 0' > /dev/null; then
            echo "‚ùå Deployment failed:"
            echo "$DEPLOY_RESULT" | jq -r '.result?.details?.componentFailures // .'
            exit 1
          fi
      
          echo "‚úÖ Successfully deployed ${{ env.CLASS_NAME }}Test.cls"
    
      - name: üß™ Run Tests for Generated Class
        run: |
          TEST_CLASS="${{ env.CLASS_NAME }}Test"
          echo "üß™ Running Apex test: $TEST_CLASS"
      
          # Run test and capture result + exit code
          TEST_RESULT=$(sf apex run test \
            --tests "$TEST_CLASS" \
            --target-org "$ORG_ALIAS" \
            --wait 120 \
            --result-format json \
            --code-coverage \
            --json)
      
          EXIT_CODE=$?
      
          if [ $EXIT_CODE -ne 0 ]; then
            echo "‚ùå Test execution failed (compile error, timeout, or class not found):"
            echo "$TEST_RESULT" | jq -r '.message // "Unknown error"'
            exit 1
          fi
      
          echo "Test Results Summary:"
          echo "$TEST_RESULT" | jq '.'
      
          # Check for test failures
          if echo "$TEST_RESULT" | jq -e '.result.summary.failures > 0' > /dev/null; then
            echo "‚ùå Some tests failed"
            echo "$TEST_RESULT" | jq '.result.failures'
            exit 1
          fi
      
          echo "‚úÖ All tests passed!"
      
          # ‚úÖ CORRECT way to set multi-line env var
          echo "test_result<<EOF_GH_ACTION" >> $GITHUB_ENV
          echo "$TEST_RESULT" >> $GITHUB_ENV
          echo "EOF_GH_ACTION" >> $GITHUB_ENV
          
      - name: üì¶ Upload ONLY Generated Apex Test Class as Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: generated-apex-test-class-qwen
          path: |
            ${{ github.workspace }}/generated-tests/force-app/main/default/classes/${{ env.CLASS_NAME }}Test.cls
            ${{ github.workspace }}/generated-tests/force-app/main/default/classes/${{ env.CLASS_NAME }}Test.cls-meta.xml
    
      - name: üìù Create Test Report
        if: always()
        run: |
          CLASS_NAME="${{ env.CLASS_NAME }}"
          TEST_CLASS="${CLASS_NAME}Test"
    
          echo "## üß™ Apex Test Generation Report (Qwen-Coder)" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Test Class" >> $GITHUB_STEP_SUMMARY
          echo "| Class Name | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| \`${TEST_CLASS}.cls\` | ‚úÖ Generated & Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
    
          # Add test summary if available
          if [ -n "$TEST_RESULT" ]; then
            echo "### Test Execution Summary" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "$TEST_RESULT" | jq '.result.summary' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Test Execution Summary" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Test did not run or failed to execute." >> $GITHUB_STEP_SUMMARY
          fi
    
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Review the generated test class in **Artifacts**" >> $GITHUB_STEP_SUMMARY
          echo "- üìä Check code coverage and assertion details" >> $GITHUB_STEP_SUMMARY
          echo "- üîÅ Refactor prompt or Apex logic if test fails" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ Promote to higher environments after validation" >> $GITHUB_STEP_SUMMARY
