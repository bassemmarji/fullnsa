name: Generate Apex Tests with Ollama (Qwen-Coder)
on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Alias for the Salesforce org"
        required: true
        default: "orgAlias"
      MAX_CLASSES:
        type: number
        description: "Maximum number of test classes to generate (1-10)"
        required: false
        default: 3

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}
  MAX_CLASSES: ${{ github.event.inputs.MAX_CLASSES }}

jobs:
  generate_test_classes:
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ⚡ Install Dependencies
        run: |
          # Install Salesforce CLI
          npm install --global @salesforce/cli
          npm update --global @salesforce/cli
          sf plugins:update
          sf --version
          # Install jq for JSON processing
          sudo apt-get install -y jq

      - name: 🧠 Install Ollama And Pull Qwen-Coder Model
        run: |
          curl -fsSL https://ollama.com/install.sh  | sh
          nohup ollama serve > /dev/null 2>&1 &
          sleep 10  # Give Ollama time to start
          ollama pull qwen:coder

      - name: 🔐 Authenticate to Salesforce Org
        run: |
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin
          sf org list

      - name: 📦 Retrieve Org Metadata
        run: |
          sf project generate --name "org-metadata" --manifest
          if [ -f "./config/package.xml" ]; then
            echo "Found custom package.xml"
            cp ./config/package.xml ./org-metadata/manifest
          fi
          cd ./org-metadata
          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml

      - name: 🔍 Find Apex Classes Without Tests
        id: find_missing
        run: |
          SRC_DIR="$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes"
          MISSING=""
          COUNT=0
          for FILE in $(find "$SRC_DIR" -name '*.cls' ! -name '*Test.cls' | sort); do
            CLASS=$(basename "$FILE" .cls)
            TEST_FILE="$SRC_DIR/${CLASS}Test.cls"
            if [ ! -f "$TEST_FILE" ]; then
              echo "Missing test for: $CLASS"
              MISSING="$MISSING $CLASS"
              COUNT=$((COUNT+1))
            fi
            if [ "$COUNT" -ge $MAX_CLASSES ]; then
              break
            fi
          done
          echo "Selected classes: $MISSING"
          echo "classes=$MISSING" >> $GITHUB_OUTPUT

      - name: ✍️ Generate Test Classes Using Qwen-Coder
        if: ${{ steps.find_missing.outputs.classes != '' }}
        shell: bash
        run: |
          SRC_DIR="$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes"
          GENERATED_DIR="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes"
          mkdir -p "$GENERATED_DIR"

          for CLASS in ${{ steps.find_missing.outputs.classes }}; do
            echo "Generating test class for: $CLASS"
            CLASS_CONTENT=$(head -c 3000 "$SRC_DIR/${CLASS}.cls")

            if [ -z "$CLASS_CONTENT" ]; then
              echo "⚠️ Class content is empty or too small, skipping..."
              continue
            fi

            PROMPT="You are a senior Salesforce developer. Generate a comprehensive Apex test class for the following Apex class. Follow Salesforce best practices strictly.

**Class to Test:**
\`\`\`apex
$CLASS_CONTENT
\`\`\`

**Instructions:**
1. Name the class \`${CLASS}Test\` and annotate with \`@isTest\`
2. Include proper test setup using \`@testSetup\` if needed
3. Create realistic test data (Accounts, Contacts, Opportunities, etc.) using `Test.loadData` or inline DML
4. Test positive and negative scenarios, including error handling
5. Use `System.assert`, `System.assertEquals`, and `System.assertNotEquals` to validate outcomes
6. Ensure at least 75% code coverage
7. Avoid hardcoding IDs; use dynamic queries if needed
8. Do not include System.debug() unless necessary
9. Handle governor limits and bulk behavior if applicable
10. If the class uses SOQL, test with multiple records
11. If the class uses DML, test rollback behavior using Test.startTest() and Test.stopTest()
12. If the class is a trigger handler, test both insert and update operations

**Output Format:**
- Output only the Apex code
- No markdown, no explanations
- No comments unless essential
- Include metadata XML in a separate file

Begin:"
            
            echo "Generating test class using qwen:coder..."
            RESPONSE=$(timeout 120 ollama run qwen:coder "$PROMPT" | sed '/^$/d' | sed '/```/d' | sed '/^---$/d' || true)

            if [[ "$RESPONSE" == *"@isTest"* ]] && [[ "$RESPONSE" == *"class ${CLASS}Test"* ]]; then
              echo "$RESPONSE" > "$GENERATED_DIR/${CLASS}Test.cls"
              echo '<?xml version="1.0" encoding="UTF-8"?>' > "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
              echo '<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
              echo '    <apiVersion>60.0</apiVersion>' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
              echo '    <status>Active</status>' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
              echo '</ApexClass>' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
              echo "✅ Successfully generated test class for $CLASS"
            else
              echo "⚠️ Failed to generate valid test class, creating placeholder"
              echo "// Auto-generated test class (failed to generate)" > "$GENERATED_DIR/${CLASS}Test.cls"
              echo '<?xml version="1.0" encoding="UTF-8"?>' > "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
              echo '<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
              echo '    <apiVersion>60.0</apiVersion>' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
              echo '    <status>Active</status>' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
              echo '</ApexClass>' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
            fi

            sleep 10
          done

      - name: ✅ Validate Generated Test Classes
        if: ${{ steps.find_missing.outputs.classes != '' }}
        run: |
          GENERATED_DIR="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes"
          for CLASS in ${{ steps.find_missing.outputs.classes }}; do
            if ! grep -q "@isTest" "$GENERATED_DIR/${CLASS}Test.cls"; then
              echo "❌ Error: Missing @isTest in ${CLASS}Test.cls"
              exit 1
            fi
            if ! grep -q "class ${CLASS}Test" "$GENERATED_DIR/${CLASS}Test.cls"; then
              echo "❌ Error: Wrong class name in ${CLASS}Test.cls"
              exit 1
            fi
          done

      - name: 🚀 Deploy Only Generated Test Classes
        id: deploy
        if: ${{ steps.find_missing.outputs.classes != '' }}
        run: |
          DEPLOY_RESULT=$(sf project deploy start \
            --source-dir "$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes" \
            --target-org $ORG_ALIAS \
            --wait 30 \
            --json || true)
          
          if echo "$DEPLOY_RESULT" | jq -e '.status == "Failed"' > /dev/null; then
            echo "❌ Deployment failed:"
            echo "$DEPLOY_RESULT" | jq '.result.details.componentFailures'
            exit 1
          fi
          echo "✅ Deployment successful"

      - name: 🧪 Run Tests for Generated Classes
        id: run_tests
        if: ${{ steps.find_missing.outputs.classes != '' }}
        run: |
          TEST_CLASSES=""
          for CLASS in ${{ steps.find_missing.outputs.classes }}; do
            TEST_CLASSES="$TEST_CLASSES,${CLASS}Test"
          done
          TEST_CLASSES="${TEST_CLASSES#,}"

          TEST_RESULT=$(sf apex run test \
            --tests "$TEST_CLASSES" \
            --target-org $ORG_ALIAS \
            --wait 30 \
            --result-format json \
            --code-coverage \
            --json || true)

          echo "Test Results Summary:"
          echo "$TEST_RESULT" | jq '.result.summary'

          if echo "$TEST_RESULT" | jq -e '.result.summary.failures > 0' > /dev/null; then
            echo "❌ Some tests failed"
            exit 1
          fi

      - name: 📦 Upload Generated Apex Test Classes as Artifacts
        if: ${{ steps.find_missing.outputs.classes != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: generated-apex-test-classes-qwen
          path: generated-tests/

      - name: 📝 Create Test Report
        if: ${{ steps.find_missing.outputs.classes != '' }}
        run: |
          echo "## 🧪 Apex Test Generation Report (Qwen-Coder)" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Test Classes" >> $GITHUB_STEP_SUMMARY
          echo "| Class Name | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          for CLASS in ${{ steps.find_missing.outputs.classes }}; do
            echo "| \`${CLASS}Test.cls\` | ✅ Generated |" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment & Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          echo '${{ toJSON(steps.deploy.outputs) }}' | jq '.' >> $GITHUB_STEP_SUMMARY 2>&1 || echo "No deployment details" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review test classes in Artifacts"
          echo "- Check coverage and failures"
          echo "- Refactor if needed"
