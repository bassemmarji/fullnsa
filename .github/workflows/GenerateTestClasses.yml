name: Generate Apex Tests with Ollama (DeepSeek)

on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Alias for the Salesforce org"
        required: true
        default: "orgAlias"
      MAX_CLASSES:
        type: number
        description: "Maximum number of test classes to generate (1-10)"
        required: false
        default: 3

env:
  ORG_ALIAS: ${{ github.event.inputs.ORG_ALIAS }}
  MAX_CLASSES: ${{ github.event.inputs.MAX_CLASSES }}
  
jobs:
  generate_test_classes:
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ⚡ Install Dependencies
        run: |
          # Install Salesforce CLI
          npm install --global @salesforce/cli
          npm update --global @salesforce/cli
          sf plugins:update
          sf --version
          
          # Install jq for JSON processing
          sudo apt-get install -y jq

      - name: 🧠 Install Ollama And Pull DeepSeek Model (6.7B)
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          nohup ollama serve > /dev/null 2>&1 &
          sleep 10  # Give it time to start
          ollama pull deepseek-coder:6.7b

      - name: 🔐 Authenticate to Salesforce Org
        run: |
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin
          sf org list
          
      - name: 📦 Retrieve Org Metadata
        run: |
          sf project generate --name "org-metadata" --manifest

          if [ -f "./config/package.xml" ]; then
            echo "Found custom package.xml"
            cp ./config/package.xml ./org-metadata/manifest
          fi

          cd ./org-metadata
          sf project retrieve start --target-org $ORG_ALIAS --manifest manifest/package.xml

      - name: 🔍 Find Apex Classes Without Tests
        id: find_missing
        run: |
          SRC_DIR="$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes"
          MISSING=""
          COUNT=0
      
          for FILE in $(find "$SRC_DIR" -name '*.cls' ! -name '*Test.cls' | sort); do
            CLASS=$(basename "$FILE" .cls)
            TEST_FILE="$SRC_DIR/${CLASS}Test.cls"
            if [ ! -f "$TEST_FILE" ]; then
              echo "Missing test for: $CLASS"
              MISSING="$MISSING $CLASS"
              COUNT=$((COUNT+1))
            fi
      
            if [ "$COUNT" -ge $MAX_CLASSES ]; then
              break
            fi
          done
      
          echo "Selected classes: $MISSING"
          echo "classes=$MISSING" >> $GITHUB_OUTPUT

      - name: ✍️ Generate Test Classes Using Ollama
        if: ${{ steps.find_missing.outputs.classes != '' }}
        shell: bash
        run: |
          SRC_DIR="$GITHUB_WORKSPACE/org-metadata/force-app/main/default/classes"
          GENERATED_DIR="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes"
          mkdir -p "$GENERATED_DIR"
      
          for CLASS in ${{ steps.find_missing.outputs.classes }}; do
            echo "Generating test class for: $CLASS"
            
            # Get the class content to include in the prompt
            CLASS_CONTENT=$(cat "$SRC_DIR/${CLASS}.cls")
            
            PROMPT="Write a comprehensive Salesforce Apex test class named ${CLASS}Test for the following Apex class. 
            Include proper test setup, positive/negative test cases, and assertions.
            Focus on testing the actual business logic in the class.

            Class to test:
            ${CLASS_CONTENT}

            Test class requirements:
            1. Must start with @isTest annotation
            2. Must include at least 75% code coverage
            3. Must follow Salesforce best practices
            4. Must include proper test data setup
            5. Must verify expected behavior through assertions
            6. Must handle error cases where appropriate

            Output only the Apex code without any explanations or markdown formatting."

            # Generate and clean the response
            RESPONSE=$(echo "$PROMPT" | ollama run deepseek-coder:6.7b | \
                     sed -n '/@isTest/,/^}/p' | \
                     sed '/```/d' | \
                     grep -v '^[[:space:]]*\/\/')

            # Save to generated directory
            echo "$RESPONSE" > "$GENERATED_DIR/${CLASS}Test.cls"
            
            echo '<?xml version="1.0" encoding="UTF-8"?>' > "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
            echo '<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
            echo '    <apiVersion>59.0</apiVersion>' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
            echo '    <status>Active</status>' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
            echo '</ApexClass>' >> "$GENERATED_DIR/${CLASS}Test.cls-meta.xml"
            
            echo "✅ Test class for $CLASS created in generated-tests directory."
          done

      - name: ✅ Validate Generated Test Classes
        if: ${{ steps.find_missing.outputs.classes != '' }}
        run: |
          GENERATED_DIR="$GITHUB_WORKSPACE/generated-tests/force-app/main/default/classes"
          for CLASS in ${{ steps.find_missing.outputs.classes }}; do
            echo "Validating ${CLASS}Test.cls"
            if ! grep -q "@isTest" "$GENERATED_DIR/${CLASS}Test.cls"; then
              echo "❌ Error: Missing @isTest annotation in ${CLASS}Test.cls"
              exit 1
            fi
            if ! grep -q "class ${CLASS}Test" "$GENERATED_DIR/${CLASS}Test.cls"; then
              echo "❌ Error: Incorrect class name in ${CLASS}Test.cls"
              exit 1
            fi
            if ! grep -q "testMethod" "$GENERATED_DIR/${CLASS}Test.cls" && ! grep -q "@isTest" "$GENERATED_DIR/${CLASS}Test.cls"; then
              echo "❌ Error: No test methods found in ${CLASS}Test.cls"
              exit 1
            fi
          done

      - name: 🚀 Deploy Only Generated Test Classes
        id: deploy
        if: ${{ steps.find_missing.outputs.classes != '' }}
        run: |
          GENERATED_DIR="$GITHUB_WORKSPACE/generated-tests"
          
          echo "Deploying test classes from: $GENERATED_DIR"
          DEPLOY_RESULT=$(sf project deploy start \
            --source-dir "$GENERATED_DIR/force-app/main/default/classes" \
            --target-org $ORG_ALIAS \
            --wait 30 \
            --json || true)
          
          if echo "$DEPLOY_RESULT" | jq -e '.status == "Failed"' > /dev/null; then
            echo "❌ Deployment failed:"
            echo "$DEPLOY_RESULT" | jq '.result.details.componentFailures'
            exit 1
          fi
          echo "✅ Deployment successful"

      - name: 🧪 Run Tests for Only Generated Classes
        id: run_tests
        if: ${{ steps.find_missing.outputs.classes != '' }}
        run: |
          TEST_CLASSES=""
          for CLASS in ${{ steps.find_missing.outputs.classes }}; do
            TEST_CLASSES="$TEST_CLASSES,${CLASS}Test"
          done
          TEST_CLASSES="${TEST_CLASSES#,}"
          
          echo "Running tests for: $TEST_CLASSES"
          TEST_RESULT=$(sf apex run test \
            --tests "$TEST_CLASSES" \
            --target-org $ORG_ALIAS \
            --wait 30 \
            --result-format json \
            --code-coverage \
            --json || true)
          
          echo "Test Results Summary:"
          echo "$TEST_RESULT" | jq '.result.summary'
          
          # Output coverage information
          echo "Code Coverage:"
          echo "$TEST_RESULT" | jq '.result.coverage'
          
          # Fail the job if any tests failed
          if echo "$TEST_RESULT" | jq -e '.result.summary.failures > 0' > /dev/null; then
            echo "❌ Some tests failed:"
            echo "$TEST_RESULT" | jq '.result.tests[] | select(.Outcome == "Fail")'
            exit 1
          fi

      - name: 📦 Upload Generated Apex Test Classes as Artifacts
        if: ${{ steps.find_missing.outputs.classes != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: generated-apex-test-classes
          path: generated-tests/
      
      - name: 📝 Create Test Report
        if: ${{ steps.find_missing.outputs.classes != '' }}
        run: |
          echo "## 🧪 Apex Test Generation Report" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Test Classes" >> $GITHUB_STEP_SUMMARY
          echo "| Class Name | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for CLASS in ${{ steps.find_missing.outputs.classes }}; do
            echo "| \`${CLASS}Test.cls\` | ✅ Successfully generated |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          echo '${{ toJSON(steps.deploy.outputs) }}' | jq '.' >> $GITHUB_STEP_SUMMARY 2>&1 || echo "No deployment details available" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          echo '${{ toJSON(steps.run_tests.outputs) }}' | jq '.' >> $GITHUB_STEP_SUMMARY 2>&1 || echo "No test results available" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review generated test classes in the Artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "- Check test coverage results above" >> $GITHUB_STEP_SUMMARY
          echo "- Manually validate any edge cases not covered by generated tests" >> $GITHUB_STEP_SUMMARY
