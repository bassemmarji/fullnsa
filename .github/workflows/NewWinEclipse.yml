name: Windows Eclipse Maven Setup
on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
jobs:
  setup:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      # Set up Java first
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          
      # Cache Maven dependencies - FIXED VERSION
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      # Set up Maven
      - name: Setup Maven
        uses: s4u/setup-maven-action@v1.14.0
        with:
          maven-version: '3.8.8'
          
      - name: Verify Maven version
        run: mvn -version
        
      # Download and extract Eclipse with error handling
      - name: Download Eclipse Oxygen 4.7
        run: |
          try {
            Write-Host "Downloading Eclipse..."
            Invoke-WebRequest -Uri "https://archive.eclipse.org/eclipse/downloads/drops/R-4.7-201706111000/eclipse-SDK-4.7-win32-x86_64.zip" -OutFile "eclipse.zip" -TimeoutSec 300
            Write-Host "Extracting Eclipse..."
            Expand-Archive -Path "eclipse.zip" -DestinationPath "C:\" -Force
            Write-Host "Eclipse downloaded and extracted successfully"
          }
          catch {
            Write-Error "Failed to download or extract Eclipse: $_"
            exit 1
          }
        shell: pwsh
        
      # Verify Eclipse installation
      - name: Verify Eclipse Installation
        run: |
          if (Test-Path "C:\eclipse\eclipse.exe") {
            Write-Host "Eclipse installation verified"
            Get-ChildItem "C:\eclipse\" | Select-Object Name, Length
          } else {
            Write-Error "Eclipse executable not found"
            exit 1
          }
        shell: pwsh
        
      # Install BPMN2 plugin with better error handling
      - name: Install BPMN2 plugin
        run: |
          try {
            Write-Host "Installing BPMN2 Modeler plugin..."
            $process = Start-Process -FilePath "C:\eclipse\eclipse.exe" -ArgumentList @(
              "-application", "org.eclipse.equinox.p2.director",
              "-noSplash",
              "-repository", "https://download.eclipse.org/bpmn2-modeler/releases/oxygen/1.5.2/",
              "-installIU", "org.eclipse.bpmn2.modeler.feature.feature.group"
            ) -Wait -PassThru -WindowStyle Hidden
            
            if ($process.ExitCode -eq 0) {
              Write-Host "BPMN2 plugin installed successfully"
            } else {
              Write-Warning "BPMN2 plugin installation may have failed (Exit code: $($process.ExitCode))"
            }
          }
          catch {
            Write-Error "Failed to install BPMN2 plugin: $_"
            # Don't fail the build, continue without the plugin
          }
        shell: pwsh
        
      # Alternative: Download BPMN2 plugin manually if above fails
      - name: Download BPMN2 Plugin (Alternative)
        run: |
          try {
            Write-Host "Downloading BPMN2 plugin as backup..."
            $pluginUrl = "https://download.eclipse.org/bpmn2-modeler/releases/oxygen/1.5.2/plugins/"
            $dropinsPath = "C:\eclipse\dropins"
            New-Item -ItemType Directory -Path $dropinsPath -Force
            
            # Download main plugin files
            $plugins = @(
              "org.eclipse.bpmn2.modeler.core_1.5.2.Final-v20201216-1825-B93.jar",
              "org.eclipse.bpmn2.modeler.ui_1.5.2.Final-v20201216-1825-B93.jar"
            )
            
            foreach ($plugin in $plugins) {
              try {
                Invoke-WebRequest -Uri "$pluginUrl$plugin" -OutFile "$dropinsPath\$plugin" -TimeoutSec 120
                Write-Host "Downloaded $plugin"
              }
              catch {
                Write-Warning "Could not download $plugin"
              }
            }
          }
          catch {
            Write-Warning "Alternative plugin download failed: $_"
          }
        shell: pwsh
        
      # Configure git
      - name: Configure git
        run: |
          git config --global user.name "bassemmarji"
          git config --global user.email "bassemmarji@gmail.com"
          
      # Create a smaller, more efficient archive
      - name: Create Eclipse portable package
        run: |
          try {
            Write-Host "Creating portable Eclipse package..."
            
            # Create eclipse_package directory
            New-Item -ItemType Directory -Path "eclipse_package" -Force
            
            # Copy only essential Eclipse files (exclude some large unnecessary files)
            $excludePatterns = @("*.log", "*.tmp", "workspace", "configuration\*.log")
            
            Write-Host "Compressing Eclipse installation..."
            Compress-Archive -Path "C:\eclipse\*" -DestinationPath "eclipse_package\eclipse-oxygen-portable.zip" -CompressionLevel Optimal
            
            $size = (Get-Item "eclipse_package\eclipse-oxygen-portable.zip").Length / 1MB
            Write-Host "Eclipse package created: $([math]::Round($size, 2)) MB"
          }
          catch {
            Write-Error "Failed to create Eclipse package: $_"
            exit 1
          }
        shell: pwsh
        
      # Verify package before committing
      - name: Verify package integrity
        run: |
          if (Test-Path "eclipse_package\eclipse-oxygen-portable.zip") {
            $size = (Get-Item "eclipse_package\eclipse-oxygen-portable.zip").Length
            if ($size -gt 100MB) {
              Write-Host "Package verification successful - Size: $($size / 1MB) MB"
            } else {
              Write-Error "Package seems too small, might be corrupted"
              exit 1
            }
          } else {
            Write-Error "Package file not found"
            exit 1
          }
        shell: pwsh
        
      # Add to repository with better commit message
      - name: Add Eclipse package to repository
        run: |
          # Check if there are changes to commit
          git add eclipse_package/
          
          if (git diff --staged --quiet) {
            Write-Host "No changes to commit"
          } else {
            $commitMessage = "Add Eclipse Oxygen 4.7 portable package with BPMN2 Modeler"
            Write-Host "Committing changes..."
            git commit -m "$commitMessage"
            git push
            Write-Host "Eclipse package committed successfully"
          }
        shell: pwsh
        
      # Create setup instructions
      - name: Create setup instructions
        run: |
          $instructions = @"
          # Eclipse Oxygen Setup Instructions
          
          ## What's Included
          - Eclipse Oxygen 4.7 (SDK)
          - BPMN2 Modeler Plugin
          - Maven Integration (m2e)
          
          ## Setup Steps
          1. Download ``eclipse-oxygen-portable.zip`` from the ``eclipse_package`` folder
          2. Extract to desired location (e.g., ``C:\eclipse``)
          3. Run ``eclipse.exe`` to start Eclipse
          4. Create workspace when prompted
          5. Verify plugins: Help → Installation Details
          
          ## Creating Activiti Project
          1. File → New → Maven Project
          2. Use archetype or create simple project
          3. Add Activiti 6.0 dependencies to pom.xml
          4. Create BPMN diagrams: File → New → Other → BPMN
          
          ## Troubleshooting
          - If BPMN2 Modeler not working: Help → Install New Software → Add Local → Point to plugins folder
          - Maven issues: Right-click project → Maven → Reload Projects
          - Memory issues: Edit eclipse.ini, increase -Xmx value
          
          Generated on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          Runner OS: Windows
          "@
          
          $instructions | Out-File -FilePath "eclipse_package\README.md" -Encoding UTF8
          
          # Add README to git
          git add eclipse_package/README.md
          git commit -m "Add Eclipse setup instructions"
          git push
          shell: pwsh
