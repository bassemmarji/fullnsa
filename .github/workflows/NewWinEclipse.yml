name: Windows Eclipse Maven Setup
on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
jobs:
  setup:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      # Set up Java first
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          
      # Cache Maven dependencies - FIXED VERSION
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      # Set up Maven manually (avoiding deprecated cache issue)
      - name: Setup Maven
        run: |
          $mavenVersion = "3.8.8"
          $mavenUrl = "https://archive.apache.org/dist/maven/maven-3/$mavenVersion/binaries/apache-maven-$mavenVersion-bin.zip"
          
          Write-Host "Downloading Maven $mavenVersion..."
          Invoke-WebRequest -Uri $mavenUrl -OutFile "maven.zip" -TimeoutSec 300
          
          Write-Host "Extracting Maven..."
          Expand-Archive -Path "maven.zip" -DestinationPath "C:\" -Force
          
          # Add Maven to PATH
          $mavenHome = "C:\apache-maven-$mavenVersion"
          $env:MAVEN_HOME = $mavenHome
          $env:PATH = "$mavenHome\bin;$env:PATH"
          
          # Set for subsequent steps
          echo "MAVEN_HOME=$mavenHome" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$mavenHome\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "Maven setup completed"
        shell: pwsh
          
      - name: Verify Maven version
        run: mvn -version
        
      # Download and extract Eclipse with multiple fallback URLs
      - name: Download Eclipse IDE
        run: |
          $eclipseUrls = @(
            # Try Eclipse 2023-03 (more recent, stable)
            "https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2023-03/R/eclipse-java-2023-03-R-win32-x86_64.zip&mirror_id=1",
            # Try Eclipse 2022-12
            "https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2022-12/R/eclipse-java-2022-12-R-win32-x86_64.zip&mirror_id=1",
            # Direct mirror link for 2023-03
            "https://mirror.math.princeton.edu/pub/eclipse/technology/epp/downloads/release/2023-03/R/eclipse-java-2023-03-R-win32-x86_64.zip",
            # Archive.org backup
            "https://archive.org/download/eclipse-java-2023-03-R-win32-x86_64/eclipse-java-2023-03-R-win32-x86_64.zip"
          )
          
          $downloadSuccess = $false
          
          foreach ($url in $eclipseUrls) {
            try {
              Write-Host "Attempting to download Eclipse from: $url"
              Invoke-WebRequest -Uri $url -OutFile "eclipse.zip" -TimeoutSec 600 -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
              
              # Verify download
              $fileSize = (Get-Item "eclipse.zip").Length
              if ($fileSize -gt 100MB) {
                Write-Host "Download successful - Size: $([math]::Round($fileSize / 1MB, 2)) MB"
                $downloadSuccess = $true
                break
              } else {
                Write-Warning "Downloaded file seems too small ($([math]::Round($fileSize / 1MB, 2)) MB), trying next URL..."
                Remove-Item "eclipse.zip" -ErrorAction SilentlyContinue
              }
            }
            catch {
              Write-Warning "Failed to download from $url : $_"
              Remove-Item "eclipse.zip" -ErrorAction SilentlyContinue
              continue
            }
          }
          
          if (-not $downloadSuccess) {
            Write-Error "Failed to download Eclipse from all available sources"
            exit 1
          }
          
          try {
            Write-Host "Extracting Eclipse..."
            Expand-Archive -Path "eclipse.zip" -DestinationPath "C:\" -Force
            Write-Host "Eclipse extracted successfully"
            
            # Cleanup
            Remove-Item "eclipse.zip" -ErrorAction SilentlyContinue
          }
          catch {
            Write-Error "Failed to extract Eclipse: $_"
            exit 1
          }
        shell: pwsh
        
      # Verify Eclipse installation
      - name: Verify Eclipse Installation
        run: |
          if (Test-Path "C:\eclipse\eclipse.exe") {
            Write-Host "Eclipse installation verified"
            Get-ChildItem "C:\eclipse\" | Select-Object Name, Length
          } else {
            Write-Error "Eclipse executable not found"
            exit 1
          }
        shell: pwsh
        
      # Install BPMN2 plugin with updated repositories
      - name: Install BPMN2 plugin
        run: |
          try {
            Write-Host "Installing BPMN2 Modeler plugin..."
            
            # For newer Eclipse versions, use updated repository
            $repositories = @(
              "https://download.eclipse.org/bpmn2-modeler/updates/",
              "https://download.eclipse.org/releases/2023-03/"
            )
            
            $installSuccess = $false
            
            foreach ($repo in $repositories) {
              try {
                Write-Host "Trying repository: $repo"
                $process = Start-Process -FilePath "C:\eclipse\eclipse.exe" -ArgumentList @(
                  "-application", "org.eclipse.equinox.p2.director",
                  "-noSplash",
                  "-repository", $repo,
                  "-installIU", "org.eclipse.bpmn2.modeler.feature.feature.group"
                ) -Wait -PassThru -WindowStyle Hidden -RedirectStandardError "error.log" -RedirectStandardOutput "output.log"
                
                if ($process.ExitCode -eq 0) {
                  Write-Host "BPMN2 plugin installed successfully from $repo"
                  $installSuccess = $true
                  break
                } else {
                  Write-Warning "Installation failed from $repo (Exit code: $($process.ExitCode))"
                  if (Test-Path "error.log") {
                    Get-Content "error.log" | Write-Warning
                  }
                }
              }
              catch {
                Write-Warning "Error trying repository $repo : $_"
              }
            }
            
            if (-not $installSuccess) {
              Write-Warning "Could not install BPMN2 plugin via p2 director, will try manual installation"
            }
          }
          catch {
            Write-Warning "Failed to install BPMN2 plugin: $_"
          }
        shell: pwsh
        
      # Enhanced manual BPMN2 Plugin download
      - name: Download BPMN2 Plugin (Manual Backup)
        run: |
          try {
            Write-Host "Setting up manual BPMN2 plugin installation..."
            $dropinsPath = "C:\eclipse\dropins"
            New-Item -ItemType Directory -Path $dropinsPath -Force
            
            # Updated plugin download URLs for newer Eclipse versions
            $pluginUrls = @{
              "org.eclipse.bpmn2.modeler.core.jar" = "https://repo1.maven.org/maven2/org/eclipse/bpmn2/org.eclipse.bpmn2.modeler.core/1.5.3.Final/org.eclipse.bpmn2.modeler.core-1.5.3.Final.jar"
              "org.eclipse.bpmn2.modeler.ui.jar" = "https://repo1.maven.org/maven2/org/eclipse/bpmn2/org.eclipse.bpmn2.modeler.ui/1.5.3.Final/org.eclipse.bpmn2.modeler.ui-1.5.3.Final.jar"
            }

            $downloadedPlugins = 0
            
            foreach ($plugin in $pluginUrls.GetEnumerator()) {
              try {
                Write-Host "Downloading $($plugin.Key)..."
                Invoke-WebRequest -Uri $plugin.Value -OutFile "$dropinsPath\$($plugin.Key)" -TimeoutSec 120 -UserAgent "Mozilla/5.0"
                
                $fileSize = (Get-Item "$dropinsPath\$($plugin.Key)").Length
                if ($fileSize -gt 1KB) {
                  Write-Host "Successfully downloaded $($plugin.Key) - Size: $([math]::Round($fileSize / 1KB, 2)) KB"
                  $downloadedPlugins++
                } else {
                  Write-Warning "$($plugin.Key) download seems incomplete"
                  Remove-Item "$dropinsPath\$($plugin.Key)" -ErrorAction SilentlyContinue
                }
              }
              catch {
                Write-Warning "Could not download $($plugin.Key): $_"
              }
            }
            
            if ($downloadedPlugins -gt 0) {
              Write-Host "Downloaded $downloadedPlugins BPMN2 plugin files to dropins folder"
              
              # Create a simple plugin manifest
              $manifest = "Manifest-Version: 1.0`n"
              $manifest += "Bundle-ManifestVersion: 2`n"
              $manifest += "Bundle-Name: BPMN2 Modeler Manual Install`n"
              $manifest += "Bundle-SymbolicName: org.eclipse.bpmn2.modeler.manual`n"
              $manifest += "Bundle-Version: 1.5.3`n"
              $manifest += "Bundle-Vendor: Manual Installation`n"
              $manifest | Out-File -FilePath "$dropinsPath\MANIFEST.MF" -Encoding ASCII
            } else {
              Write-Warning "No BPMN2 plugins could be downloaded manually"
            }
          }
          catch {
            Write-Warning "Manual BPMN2 plugin setup failed: $_"
          }
        shell: pwsh
        
      # Configure git
      - name: Configure git
        run: |
          git config --global user.name "bassemmarji"
          git config --global user.email "bassemmarji@gmail.com"

      # Resolve Maven Repository Path
      - name: Resolve Maven Repository Path
        run: |
          echo "M2_REPO=$env:USERPROFILE\.m2\repository" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      # FIXED: Pre-download Maven plugins and archetypes
      - name: Download Essential Maven Plugins and Archetypes
        run: |
          Write-Host "Downloading essential Maven plugins and archetypes for offline use..."
          
          # Create a temporary project to trigger plugin downloads
          $tempProject = "D:\temp-maven-project"
          New-Item -ItemType Directory -Path $tempProject -Force
          Set-Location $tempProject
          
          # Create a comprehensive pom.xml that will trigger downloading of common plugins
          $pomContent = '<?xml version="1.0" encoding="UTF-8"?>' + "`n"
          $pomContent += '<project xmlns="http://maven.apache.org/POM/4.0.0"' + "`n"
          $pomContent += '         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' + "`n"
          $pomContent += '         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 ' + "`n"
          $pomContent += '         http://maven.apache.org/xsd/maven-4.0.0.xsd">' + "`n"
          $pomContent += '    <modelVersion>4.0.0</modelVersion>' + "`n"
          $pomContent += '    <groupId>com.example</groupId>' + "`n"
          $pomContent += '    <artifactId>temp-project</artifactId>' + "`n"
          $pomContent += '    <version>1.0-SNAPSHOT</version>' + "`n"
          $pomContent += '    <packaging>jar</packaging>' + "`n"
          $pomContent += '' + "`n"
          $pomContent += '    <properties>' + "`n"
          $pomContent += '        <maven.compiler.source>8</maven.compiler.source>' + "`n"
          $pomContent += '        <maven.compiler.target>8</maven.compiler.target>' + "`n"
          $pomContent += '        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>' + "`n"
          $pomContent += '    </properties>' + "`n"
          $pomContent += '' + "`n"
          $pomContent += '    <repositories>' + "`n"
          $pomContent += '        <repository>' + "`n"
          $pomContent += '            <id>jboss-public-repository-group</id>' + "`n"
          $pomContent += '            <name>JBoss Public Repository Group</name>' + "`n"
          $pomContent += '            <url>https://repository.jboss.org/nexus/content/groups/public/</url>' + "`n"
          $pomContent += '        </repository>' + "`n"
          $pomContent += '    </repositories>' + "`n"
          $pomContent += '' + "`n"
          $pomContent += '    <dependencies>' + "`n"
          $pomContent += '        <!-- Activiti dependencies for BPMN -->' + "`n"
          $pomContent += '        <dependency>' + "`n"
          $pomContent += '            <groupId>org.activiti</groupId>' + "`n"
          $pomContent += '            <artifactId>activiti-engine</artifactId>' + "`n"
          $pomContent += '            <version>6.0.0</version>' + "`n"
          $pomContent += '        </dependency>' + "`n"
          $pomContent += '        <dependency>' + "`n"
          $pomContent += '            <groupId>org.activiti</groupId>' + "`n"
          $pomContent += '            <artifactId>activiti-modeler</artifactId>' + "`n"
          $pomContent += '            <version>6.0.0</version>' + "`n"
          $pomContent += '        </dependency>' + "`n"
          $pomContent += '        <dependency>' + "`n"
          $pomContent += '            <groupId>junit</groupId>' + "`n"
          $pomContent += '            <artifactId>junit</artifactId>' + "`n"
          $pomContent += '            <version>4.13.2</version>' + "`n"
          $pomContent += '            <scope>test</scope>' + "`n"
          $pomContent += '        </dependency>' + "`n"
          $pomContent += '    </dependencies>' + "`n"
          $pomContent += '' + "`n"
          $pomContent += '    <build>' + "`n"
          $pomContent += '        <plugins>' + "`n"
          $pomContent += '            <plugin>' + "`n"
          $pomContent += '                <groupId>org.apache.maven.plugins</groupId>' + "`n"
          $pomContent += '                <artifactId>maven-compiler-plugin</artifactId>' + "`n"
          $pomContent += '                <version>3.11.0</version>' + "`n"
          $pomContent += '            </plugin>' + "`n"
          $pomContent += '            <plugin>' + "`n"
          $pomContent += '                <groupId>org.apache.maven.plugins</groupId>' + "`n"
          $pomContent += '                <artifactId>maven-surefire-plugin</artifactId>' + "`n"
          $pomContent += '                <version>3.1.2</version>' + "`n"
          $pomContent += '            </plugin>' + "`n"
          $pomContent += '            <plugin>' + "`n"
          $pomContent += '                <groupId>org.apache.maven.plugins</groupId>' + "`n"
          $pomContent += '                <artifactId>maven-jar-plugin</artifactId>' + "`n"
          $pomContent += '                <version>3.3.0</version>' + "`n"
          $pomContent += '            </plugin>' + "`n"
          $pomContent += '            <plugin>' + "`n"
          $pomContent += '                <groupId>org.apache.maven.plugins</groupId>' + "`n"
          $pomContent += '                <artifactId>maven-archetype-plugin</artifactId>' + "`n"
          $pomContent += '                <version>3.2.1</version>' + "`n"
          $pomContent += '            </plugin>' + "`n"
          $pomContent += '        </plugins>' + "`n"
          $pomContent += '    </build>' + "`n"
          $pomContent += '</project>' + "`n"
          
          $pomContent | Out-File -FilePath "$tempProject\pom.xml" -Encoding UTF8
          
          # Download all dependencies and plugins
          Write-Host "Running dependency:go-offline to cache all dependencies..."
          mvn dependency:go-offline -B
          
          Write-Host "Running compile to trigger plugin downloads..."
          mvn compile -B
          
          Write-Host "Creating source directories and running package to trigger more plugins..."
          New-Item -ItemType Directory -Path "$tempProject\src\main\java" -Force
          New-Item -ItemType Directory -Path "$tempProject\src\test\java" -Force
          
          # Create a simple Java file
          $javaContent = 'package com.example;' + "`n"
          $javaContent += 'public class HelloWorld {' + "`n"
          $javaContent += '    public static void main(String[] args) {' + "`n"
          $javaContent += '        System.out.println("Hello World!");' + "`n"
          $javaContent += '    }' + "`n"
          $javaContent += '}' + "`n"
          
          $javaContent | Out-File -FilePath "$tempProject\src\main\java\HelloWorld.java" -Encoding UTF8
          
          mvn package -B
          
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Some Maven operations failed, but continuing..."
          }
        shell: pwsh

      # FIXED: Generate Maven archetype with correct coordinates
      - name: Download Maven Archetypes
        run: |
          Write-Host "Downloading Maven archetypes for offline use..."
          
          # Clean any corrupted archetype cache
          Remove-Item -Recurse -Force "$env:USERPROFILE\.m2\repository\org\apache\maven\archetypes" -ErrorAction SilentlyContinue
          
          # Download quickstart archetype with correct coordinates
          Write-Host "Downloading maven-archetype-quickstart..."
          mvn dependency:get -B `
            -DgroupId=org.apache.maven.archetypes `
            -DartifactId=maven-archetype-quickstart `
            -Dversion=1.4 `
            -Dtransitive=false
          
          # Download webapp archetype
          Write-Host "Downloading maven-archetype-webapp..."
          mvn dependency:get -B `
            -DgroupId=org.apache.maven.archetypes `
            -DartifactId=maven-archetype-webapp `
            -Dversion=1.4 `
            -Dtransitive=false
          
          # Test archetype generation with correct coordinates
          $testDir = "D:\archetype-test"
          New-Item -ItemType Directory -Path $testDir -Force
          Set-Location $testDir
          
          Write-Host "Testing archetype generation..."
          mvn archetype:generate -B `
            -DgroupId=com.example `
            -DartifactId=test-project `
            -Dversion=1.0.0 `
            -DarchetypeGroupId=org.apache.maven.archetypes `
            -DarchetypeArtifactId=maven-archetype-quickstart `
            -DarchetypeVersion=1.4 `
            -DinteractiveMode=false
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Archetype generation test successful"
          } else {
            Write-Error "❌ Archetype generation test failed"
            exit 1
          }
        shell: pwsh
  
      # Verify all required components are cached
      - name: Verify Maven Repository Contents
        run: |
          Write-Host "Verifying Maven repository contents..."
          
          $requiredPaths = @(
            "$env:USERPROFILE\.m2\repository\org\apache\maven\plugins\maven-archetype-plugin",
            "$env:USERPROFILE\.m2\repository\org\apache\maven\archetypes\maven-archetype-quickstart",
            "$env:USERPROFILE\.m2\repository\org\apache\maven\archetypes\maven-archetype-webapp",
            "$env:USERPROFILE\.m2\repository\org\activiti\activiti-engine",
            "$env:USERPROFILE\.m2\repository\junit\junit"
          )
          
          $missingPaths = @()
          foreach ($path in $requiredPaths) {
            if (Test-Path $path) {
              $size = (Get-ChildItem $path -Recurse | Measure-Object -Property Length -Sum).Sum / 1KB
              Write-Host "✅ Found: $path ($([math]::Round($size, 2)) KB)"
            } else {
              Write-Warning "❌ Missing: $path"
              $missingPaths += $path
            }
          }
          
          if ($missingPaths.Count -eq 0) {
            Write-Host "✅ All required Maven components are cached"
          } else {
            Write-Warning "Some components are missing, but continuing..."
          }
          
          # Show repository size
          $totalSize = (Get-ChildItem "$env:USERPROFILE\.m2\repository" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          Write-Host "Total Maven repository size: $([math]::Round($totalSize, 2)) MB"
        shell: pwsh

      # Create and Split Eclipse Portable Package
      - name: Create and Split Eclipse Portable Package
        run: |
          try {
            Write-Host "Creating optimized Eclipse package..."
            New-Item -ItemType Directory -Path "eclipse_package" -Force
            $tempEclipse = "C:\eclipse_temp"
            New-Item -ItemType Directory -Path $tempEclipse -Force

            # Copy essential files only
            Copy-Item -Path "C:\eclipse\eclipse.exe" -Destination $tempEclipse
            Copy-Item -Path "C:\eclipse\eclipsec.exe" -Destination $tempEclipse -ErrorAction SilentlyContinue
            Copy-Item -Path "C:\eclipse\eclipse.ini" -Destination $tempEclipse

            $essentialDirs = @("configuration", "features", "plugins", "dropins")
            foreach ($dir in $essentialDirs) {
              if (Test-Path "C:\eclipse\$dir") {
                Write-Host "Copying $dir..."
                Copy-Item -Path "C:\eclipse\$dir" -Destination $tempEclipse -Recurse -Force
              }
            }

            # Clean up unnecessary files to reduce size
            Write-Host "Optimizing package size..."
            Get-ChildItem "$tempEclipse\plugins" -Filter "*.source_*" | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
            Get-ChildItem "$tempEclipse\plugins" -Filter "*.doc_*" | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
            Get-ChildItem "$tempEclipse\features" -Filter "*.source_*" | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue

            # Compress
            Write-Host "Compressing Eclipse package..."
            Compress-Archive -Path "$tempEclipse\*" -DestinationPath "eclipse_package\eclipse-portable.zip" -CompressionLevel Optimal
            Remove-Item -Path $tempEclipse -Recurse -Force

            $zipPath = "eclipse_package\eclipse-portable.zip"
            $sizeMB = (Get-Item $zipPath).Length / 1MB
            Write-Host "Final package size: $([math]::Round($sizeMB, 2)) MB"

            # Split into chunks if needed (GitHub has 100MB limit)
            if ($sizeMB -gt 90) {
              Write-Host "Splitting into chunks under 100 MB for GitHub compatibility..."

              $chunkSizeBytes = 99 * 1024 * 1024  # 99 MB
              $fileStream = [System.IO.File]::OpenRead($zipPath)
              $buffer = New-Object byte[] $chunkSizeBytes
              $index = 0
              
              while ($bytesRead = $fileStream.Read($buffer, 0, $buffer.Length)) {
                $chunkPath = "eclipse_package\eclipse-part-{0:D2}.zip" -f $index
                [System.IO.File]::WriteAllBytes($chunkPath, $buffer[0..($bytesRead-1)])
                Write-Host "Created: $chunkPath ($([math]::Round($bytesRead / 1MB, 2)) MB)"
                $index++
              }
              $fileStream.Close()

              # Remove original large zip
              Remove-Item $zipPath

              # Create reassembly script
              $reassembleScript = 'Write-Host "Reassembling eclipse-portable.zip from split parts..."' + "`n"
              $reassembleScript += '$parts = Get-ChildItem "eclipse-part-*" | Sort-Object Name' + "`n"
              $reassembleScript += '$output = [System.IO.File]::Create("eclipse-portable.zip")' + "`n"
              $reassembleScript += 'foreach ($part in $parts) {' + "`n"
              $reassembleScript += '    Write-Host "Processing $($part.Name)..."' + "`n"
              $reassembleScript += '    $data = [System.IO.File]::ReadAllBytes($part.FullName)' + "`n"
              $reassembleScript += '    $output.Write($data, 0, $data.Length)' + "`n"
              $reassembleScript += '}' + "`n"
              $reassembleScript += '$output.Close()' + "`n"
              $reassembleScript += 'Write-Host "Reassembly complete: eclipse-portable.zip"' + "`n"
              $reassembleScript += 'Write-Host "You can now extract it with any ZIP tool."' + "`n"
              
              $reassembleScript | Out-File -FilePath "eclipse_package\reassemble.ps1" -Encoding UTF8
              Write-Host "✅ Splitting completed and reassembly script created."
            } else {
              Write-Host "✅ Package is small enough, no splitting needed."
            }
          }
          catch {
            Write-Error "Failed to create or split Eclipse package: $_"
            exit 1
          }
        shell: pwsh
        
      # Upload Maven Repository for Offline Use
      - name: Upload Maven Repository for Offline Use
        uses: actions/upload-artifact@v4
        with:
          name: maven-repository-offline
          path: ${{ env.M2_REPO }}
          retention-days: 7
          if-no-files-found: warn
      
      # Upload Eclipse Package
      - name: Upload Eclipse Package
        uses: actions/upload-artifact@v4
        with:
          name: eclipse-portable-package
          path: eclipse_package/
          retention-days: 7
          if-no-files-found: error
        
      # Create comprehensive setup instructions
      - name: Create Setup Instructions
        run: |
          $instructions = '# Offline Eclipse + Maven + BPMN2 Setup Package' + "`n`n"
          $instructions += '## Package Contents' + "`n"
          $instructions += '- Eclipse IDE for Java Developers (2023-03) with optimizations' + "`n"
          $instructions += '- BPMN2 Modeler Plugin (installed in dropins)' + "`n"
          $instructions += '- Complete Maven repository with:' + "`n"
          $instructions += '  - Maven Archetype Plugin (3.2.1)' + "`n"
          $instructions += '  - Maven Archetype Quickstart (1.4)' + "`n"
          $instructions += '  - Maven Archetype Webapp (1.4)' + "`n"
          $instructions += '  - Activiti Engine (6.0.0) for BPMN workflows' + "`n"
          $instructions += '  - Common Maven plugins and dependencies' + "`n`n"
          $instructions += '## Setup Instructions for Offline PC' + "`n`n"
          $instructions += '### 1. Extract Eclipse' + "`n"
          $instructions += 'If you have `eclipse-portable.zip`:' + "`n"
          $instructions += '- Extract to `C:\eclipse\` (or your preferred location)' + "`n`n"
          $instructions += 'If you have split files (`eclipse-part-*.zip`):' + "`n"
          $instructions += '- Copy all `eclipse-part-*.zip` files and `reassemble.ps1` to a folder' + "`n"
          $instructions += '- Run PowerShell as Administrator' + "`n"
          $instructions += '- Navigate to the folder: `cd "C:\path\to\eclipse-files"`' + "`n"
          $instructions += '- Run: `.\reassemble.ps1`' + "`n"
          $instructions += '- Extract the generated `eclipse-portable.zip` to `C:\eclipse\`' + "`n`n"
          $instructions += '### 2. Setup Maven Repository' + "`n"
          $instructions += '- Extract `maven-repository-offline.zip` to `C:\Users\[YourUsername]\.m2\repository\`' + "`n"
          $instructions += '- This provides offline access to all Maven dependencies' + "`n`n"
          $instructions += '### 3. Verify Installation' + "`n"
          $instructions += '- Run `C:\eclipse\eclipse.exe`' + "`n"
          $instructions += '- Create a new workspace when prompted' + "`n"
          $instructions += '- Verify BPMN2 plugin: Help → About Eclipse IDE → Installation Details' + "`n`n"
          $instructions += '## Creating BPMN Projects' + "`n`n"
          $instructions += '### Method 1: Using Maven Archetype (Recommended)' + "`n"
          $instructions += '1. File → New → Maven Project' + "`n"
          $instructions += '2. Check "Create a simple project" if you want basic setup, or:' + "`n"
          $instructions += '3. Use archetype: `org.apache.maven.archetypes:maven-archetype-quickstart:1.4`' + "`n"
          $instructions += '4. Add Activiti dependencies to `pom.xml`:' + "`n`n"
          $instructions += '```xml' + "`n"
          $instructions += '<dependencies>' + "`n"
          $instructions += '    <dependency>' + "`n"
          $instructions += '        <groupId>org.activiti</groupId>' + "`n"
          $instructions += '        <artifactId>activiti-engine</artifactId>' + "`n"
          $instructions += '        <version>6.0.0</version>' + "`n"
          $instructions += '    </dependency>' + "`n"
          $instructions += '    <dependency>' + "`n"
          $instructions += '        <groupId>org.activiti</groupId>' + "`n"
          $instructions += '        <artifactId>activiti-modeler</artifactId>' + "`n"
          $instructions += '        <version>6.0.0</version>' + "`n"
          $instructions += '    </dependency>' + "`n"
          $instructions += '</dependencies>' + "`n"
          $instructions += '```' + "`n`n"
          $instructions += '### Method 2: Create BPMN Diagrams' + "`n"
          $instructions += '1. File → New → Other → BPMN → BPMN2 Diagram' + "`n"
          $instructions += '2. Design your workflow using the BPMN2 Modeler' + "`n`n"
          $instructions += '## Troubleshooting' + "`n`n"
          $instructions += '### BPMN2 Modeler Issues' + "`n"
          $instructions += '- Check `C:\eclipse\dropins\` for BPMN2 plugin JARs' + "`n"
          $instructions += '- If missing: Help → Install New Software → Add Local → Point to dropins folder' + "`n`n"
          $instructions += '### Maven Issues' + "`n"
          $instructions += '- Right-click project → Maven → Reload Projects' + "`n"
          $instructions += '- Check `.m2\repository` contains required dependencies' + "`n"
          $instructions += '- For network issues: Use offline mode (`mvn -o <command>`)' + "`n`n"
          $instructions += '### Memory Issues' + "`n"
          $instructions += '- Edit `eclipse.ini` and increase:' + "`n"
          $instructions += '  ```' + "`n"
          $instructions += '  -Xmx2048m' + "`n"
          $instructions += '  -XX:MaxPermSize=512m' + "`n"
          $instructions += '  ```' + "`n`n"
          $instructions += '### Testing Maven Offline' + "`n"
          $instructions += '```bash' + "`n"
          $instructions += '# Test archetype generation (should work offline)' + "`n"
          $instructions += 'mvn archetype:generate -B \' + "`n"
          $instructions += '  -DgroupId=com.example \' + "`n"
          $instructions += '  -DartifactId=my-bpmn-project \' + "`n"
          $instructions += '  -Dversion=1.0.0 \' + "`n"
          $instructions += '  -DarchetypeGroupId=org.apache.maven.archetypes \' + "`n"
          $instructions += '  -DarchetypeArtifactId=maven-archetype-quickstart \' + "`n"
          $instructions += '  -DarchetypeVersion=1.4' + "`n"
          $instructions += '```' + "`n`n"
          $instructions += '## Package Information' + "`n"
          $instructions += '- Generated: ' + (Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC') + "`n"
          $instructions += '- Eclipse Version: 2023-03 (4.27)' + "`n"
          $instructions += '- Maven Repository: Includes Activiti 6.0.0 and common plugins' + "`n"
          $instructions += '- BPMN2 Plugin: Installed in dropins for offline use' + "`n"
          $instructions += '- Optimized for GitHub file size limits and offline usage' + "`n`n"
          $instructions += '## Support' + "`n"
          $instructions += 'This package is designed for complete offline development of BPMN workflows using Activiti engine.' + "`n"
          $instructions += 'All necessary dependencies are included in the Maven repository cache.' + "`n"
          
          $instructions | Out-File -FilePath "eclipse_package\README.md" -Encoding UTF8
          Write-Host "✅ Comprehensive setup instructions created"
        shell: pwsh
        
      # Final verification and commit
      - name: Add Eclipse package to repository
        run: |
          # Check if there are changes to commit
          git add eclipse_package/
          
          if (git diff --staged --quiet) {
            Write-Host "No changes to commit"
          } else {
            $commitMessage = "Add offline Eclipse package with BPMN2 and complete Maven repository"
            Write-Host "Committing changes..."
            git commit -m "$commitMessage"
            git push
            Write-Host "✅ Eclipse package committed successfully"
          }
        shell: pwsh
