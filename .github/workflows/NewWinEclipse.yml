name: Windows Eclipse Maven Setup
on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
jobs:
  setup:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      # Set up Java first
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          
      # Cache Maven dependencies - FIXED VERSION
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      # Set up Maven manually (avoiding deprecated cache issue)
      - name: Setup Maven
        run: |
          $mavenVersion = "3.8.8"
          $mavenUrl = "https://archive.apache.org/dist/maven/maven-3/$mavenVersion/binaries/apache-maven-$mavenVersion-bin.zip"
          
          Write-Host "Downloading Maven $mavenVersion..."
          Invoke-WebRequest -Uri $mavenUrl -OutFile "maven.zip" -TimeoutSec 300
          
          Write-Host "Extracting Maven..."
          Expand-Archive -Path "maven.zip" -DestinationPath "C:\" -Force
          
          # Add Maven to PATH
          $mavenHome = "C:\apache-maven-$mavenVersion"
          $env:MAVEN_HOME = $mavenHome
          $env:PATH = "$mavenHome\bin;$env:PATH"
          
          # Set for subsequent steps
          echo "MAVEN_HOME=$mavenHome" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$mavenHome\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "Maven setup completed"
        shell: pwsh
          
      - name: Verify Maven version
        run: mvn -version
        
      # Download and extract Eclipse with multiple fallback URLs
      - name: Download Eclipse IDE
        run: |
          $eclipseUrls = @(
            # Try Eclipse 2023-03 (more recent, stable)
            "https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2023-03/R/eclipse-java-2023-03-R-win32-x86_64.zip&mirror_id=1",
            # Try Eclipse 2022-12
            "https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2022-12/R/eclipse-java-2022-12-R-win32-x86_64.zip&mirror_id=1",
            # Direct mirror link for 2023-03
            "https://mirror.math.princeton.edu/pub/eclipse/technology/epp/downloads/release/2023-03/R/eclipse-java-2023-03-R-win32-x86_64.zip",
            # Archive.org backup
            "https://archive.org/download/eclipse-java-2023-03-R-win32-x86_64/eclipse-java-2023-03-R-win32-x86_64.zip"
          )
          
          $downloadSuccess = $false
          
          foreach ($url in $eclipseUrls) {
            try {
              Write-Host "Attempting to download Eclipse from: $url"
              Invoke-WebRequest -Uri $url -OutFile "eclipse.zip" -TimeoutSec 600 -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
              
              # Verify download
              $fileSize = (Get-Item "eclipse.zip").Length
              if ($fileSize -gt 100MB) {
                Write-Host "Download successful - Size: $([math]::Round($fileSize / 1MB, 2)) MB"
                $downloadSuccess = $true
                break
              } else {
                Write-Warning "Downloaded file seems too small ($([math]::Round($fileSize / 1MB, 2)) MB), trying next URL..."
                Remove-Item "eclipse.zip" -ErrorAction SilentlyContinue
              }
            }
            catch {
              Write-Warning "Failed to download from $url : $_"
              Remove-Item "eclipse.zip" -ErrorAction SilentlyContinue
              continue
            }
          }
          
          if (-not $downloadSuccess) {
            Write-Error "Failed to download Eclipse from all available sources"
            exit 1
          }
          
          try {
            Write-Host "Extracting Eclipse..."
            Expand-Archive -Path "eclipse.zip" -DestinationPath "C:\" -Force
            Write-Host "Eclipse extracted successfully"
            
            # Cleanup
            Remove-Item "eclipse.zip" -ErrorAction SilentlyContinue
          }
          catch {
            Write-Error "Failed to extract Eclipse: $_"
            exit 1
          }
        shell: pwsh
        
      # Verify Eclipse installation
      - name: Verify Eclipse Installation
        run: |
          if (Test-Path "C:\eclipse\eclipse.exe") {
            Write-Host "Eclipse installation verified"
            Get-ChildItem "C:\eclipse\" | Select-Object Name, Length
          } else {
            Write-Error "Eclipse executable not found"
            exit 1
          }
        shell: pwsh
        
      # Install BPMN2 plugin with updated repositories
      - name: Install BPMN2 plugin
        run: |
          try {
            Write-Host "Installing BPMN2 Modeler plugin..."
            
            # For newer Eclipse versions, use updated repository
            $repositories = @(
              "https://download.eclipse.org/bpmn2-modeler/updates/",
              "https://download.eclipse.org/releases/2023-03/"
            )
            
            $installSuccess = $false
            
            foreach ($repo in $repositories) {
              try {
                Write-Host "Trying repository: $repo"
                $process = Start-Process -FilePath "C:\eclipse\eclipse.exe" -ArgumentList @(
                  "-application", "org.eclipse.equinox.p2.director",
                  "-noSplash",
                  "-repository", $repo,
                  "-installIU", "org.eclipse.bpmn2.modeler.feature.feature.group"
                ) -Wait -PassThru -WindowStyle Hidden -RedirectStandardError "error.log" -RedirectStandardOutput "output.log"
                
                if ($process.ExitCode -eq 0) {
                  Write-Host "BPMN2 plugin installed successfully from $repo"
                  $installSuccess = $true
                  break
                } else {
                  Write-Warning "Installation failed from $repo (Exit code: $($process.ExitCode))"
                  if (Test-Path "error.log") {
                    Get-Content "error.log" | Write-Warning
                  }
                }
              }
              catch {
                Write-Warning "Error trying repository $repo : $_"
              }
            }
            
            if (-not $installSuccess) {
              Write-Warning "Could not install BPMN2 plugin via p2 director, will try manual installation"
            }
          }
          catch {
            Write-Warning "Failed to install BPMN2 plugin: $_"
          }
        shell: pwsh
        
      # Enhanced manual BPMN2 Plugin download
      - name: Download BPMN2 Plugin (Manual Backup)
        run: |
          try {
            Write-Host "Setting up manual BPMN2 plugin installation..."
            $dropinsPath = "C:\eclipse\dropins"
            New-Item -ItemType Directory -Path $dropinsPath -Force
            
            # Updated plugin download URLs for newer Eclipse versions
            $pluginUrls = @{
              "org.eclipse.bpmn2.modeler.core.jar" = "https://repo1.maven.org/maven2/org/eclipse/bpmn2/org.eclipse.bpmn2.modeler.core/1.5.3.Final/org.eclipse.bpmn2.modeler.core-1.5.3.Final.jar"
              "org.eclipse.bpmn2.modeler.ui.jar" = "https://repo1.maven.org/maven2/org/eclipse/bpmn2/org.eclipse.bpmn2.modeler.ui/1.5.3.Final/org.eclipse.bpmn2.modeler.ui-1.5.3.Final.jar"
            }
            
            $downloadedPlugins = 0
            
            foreach ($plugin in $pluginUrls.GetEnumerator()) {
              try {
                Write-Host "Downloading $($plugin.Key)..."
                Invoke-WebRequest -Uri $plugin.Value -OutFile "$dropinsPath\$($plugin.Key)" -TimeoutSec 120 -UserAgent "Mozilla/5.0"
                
                $fileSize = (Get-Item "$dropinsPath\$($plugin.Key)").Length
                if ($fileSize -gt 1KB) {
                  Write-Host "Successfully downloaded $($plugin.Key) - Size: $([math]::Round($fileSize / 1KB, 2)) KB"
                  $downloadedPlugins++
                } else {
                  Write-Warning "$($plugin.Key) download seems incomplete"
                  Remove-Item "$dropinsPath\$($plugin.Key)" -ErrorAction SilentlyContinue
                }
              }
              catch {
                Write-Warning "Could not download $($plugin.Key): $_"
              }
            }
            
            if ($downloadedPlugins -gt 0) {
              Write-Host "Downloaded $downloadedPlugins BPMN2 plugin files to dropins folder"
              
              # Create a simple plugin manifest
              $manifest = @"
              Manifest-Version: 1.0
              Bundle-ManifestVersion: 2
              Bundle-Name: BPMN2 Modeler Manual Install
              Bundle-SymbolicName: org.eclipse.bpmn2.modeler.manual
              Bundle-Version: 1.5.3
              Bundle-Vendor: Manual Installation
              "@
              $manifest | Out-File -FilePath "$dropinsPath\MANIFEST.MF" -Encoding ASCII
            } else {
              Write-Warning "No BPMN2 plugins could be downloaded manually"
            }
          }
          catch {
            Write-Warning "Manual BPMN2 plugin setup failed: $_"
          }
        shell: pwsh
        
      # Configure git
      - name: Configure git
        run: |
          git config --global user.name "bassemmarji"
          git config --global user.email "bassemmarji@gmail.com"
          
      # Create a smaller, more efficient archive
      - name: Create Eclipse portable package
        run: |
          try {
            Write-Host "Creating portable Eclipse package..."
            
            # Create eclipse_package directory
            New-Item -ItemType Directory -Path "eclipse_package" -Force
            
            # Copy only essential Eclipse files (exclude some large unnecessary files)
            $excludePatterns = @("*.log", "*.tmp", "workspace", "configuration\*.log")
            
            Write-Host "Compressing Eclipse installation..."
            Compress-Archive -Path "C:\eclipse\*" -DestinationPath "eclipse_package\eclipse-oxygen-portable.zip" -CompressionLevel Optimal
            
            $size = (Get-Item "eclipse_package\eclipse-oxygen-portable.zip").Length / 1MB
            Write-Host "Eclipse package created: $([math]::Round($size, 2)) MB"
          }
          catch {
            Write-Error "Failed to create Eclipse package: $_"
            exit 1
          }
        shell: pwsh
        
      # Verify package before committing
      - name: Verify package integrity
        run: |
          if (Test-Path "eclipse_package\eclipse-oxygen-portable.zip") {
            $size = (Get-Item "eclipse_package\eclipse-oxygen-portable.zip").Length
            if ($size -gt 100MB) {
              Write-Host "Package verification successful - Size: $($size / 1MB) MB"
            } else {
              Write-Error "Package seems too small, might be corrupted"
              exit 1
            }
          } else {
            Write-Error "Package file not found"
            exit 1
          }
        shell: pwsh
        
      # Add to repository with better commit message
      - name: Add Eclipse package to repository
        run: |
          # Check if there are changes to commit
          git add eclipse_package/
          
          if (git diff --staged --quiet) {
            Write-Host "No changes to commit"
          } else {
            $commitMessage = "Add Eclipse Oxygen 4.7 portable package with BPMN2 Modeler"
            Write-Host "Committing changes..."
            git commit -m "$commitMessage"
            git push
            Write-Host "Eclipse package committed successfully"
          }
        shell: pwsh
        
      # Create setup instructions
      - name: Create setup instructions
        run: |
          $instructions = @"
          # Eclipse Oxygen Setup Instructions
          
          ## What's Included
          - Eclipse Oxygen 4.7 (SDK)
          - BPMN2 Modeler Plugin
          - Maven Integration (m2e)
          
          ## Setup Steps
          1. Download ``eclipse-oxygen-portable.zip`` from the ``eclipse_package`` folder
          2. Extract to desired location (e.g., ``C:\eclipse``)
          3. Run ``eclipse.exe`` to start Eclipse
          4. Create workspace when prompted
          5. Verify plugins: Help → Installation Details
          
          ## Creating Activiti Project
          1. File → New → Maven Project
          2. Use archetype or create simple project
          3. Add Activiti 6.0 dependencies to pom.xml
          4. Create BPMN diagrams: File → New → Other → BPMN
          
          ## Troubleshooting
          - If BPMN2 Modeler not working: Help → Install New Software → Add Local → Point to plugins folder
          - Maven issues: Right-click project → Maven → Reload Projects
          - Memory issues: Edit eclipse.ini, increase -Xmx value
          
          Generated on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          Runner OS: Windows
          "@
          
          $instructions | Out-File -FilePath "eclipse_package\README.md" -Encoding UTF8
          
          # Add README to git
          git add eclipse_package/README.md
          git commit -m "Add Eclipse setup instructions"
          git push
          shell: pwsh
