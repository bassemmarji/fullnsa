name: Windows Eclipse Maven Setup
on:
  workflow_dispatch:
    inputs:
      ORG_ALIAS:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
jobs:
  setup:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      # Set up Java first
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          
      # Cache Maven dependencies - FIXED VERSION
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      # Set up Maven manually (avoiding deprecated cache issue)
      - name: Setup Maven
        run: |
          $mavenVersion = "3.8.8"
          $mavenUrl = "https://archive.apache.org/dist/maven/maven-3/$mavenVersion/binaries/apache-maven-$mavenVersion-bin.zip"
          
          Write-Host "Downloading Maven $mavenVersion..."
          Invoke-WebRequest -Uri $mavenUrl -OutFile "maven.zip" -TimeoutSec 300
          
          Write-Host "Extracting Maven..."
          Expand-Archive -Path "maven.zip" -DestinationPath "C:\" -Force
          
          # Add Maven to PATH
          $mavenHome = "C:\apache-maven-$mavenVersion"
          $env:MAVEN_HOME = $mavenHome
          $env:PATH = "$mavenHome\bin;$env:PATH"
          
          # Set for subsequent steps
          echo "MAVEN_HOME=$mavenHome" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$mavenHome\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "Maven setup completed"
        shell: pwsh
          
      - name: Verify Maven version
        run: mvn -version
        
      # Download and extract Eclipse with multiple fallback URLs
      - name: Download Eclipse IDE
        run: |
          $eclipseUrls = @(
            # Try Eclipse 2023-03 (more recent, stable)
            "https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2023-03/R/eclipse-java-2023-03-R-win32-x86_64.zip&mirror_id=1",
            # Try Eclipse 2022-12
            "https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2022-12/R/eclipse-java-2022-12-R-win32-x86_64.zip&mirror_id=1",
            # Direct mirror link for 2023-03
            "https://mirror.math.princeton.edu/pub/eclipse/technology/epp/downloads/release/2023-03/R/eclipse-java-2023-03-R-win32-x86_64.zip",
            # Archive.org backup
            "https://archive.org/download/eclipse-java-2023-03-R-win32-x86_64/eclipse-java-2023-03-R-win32-x86_64.zip"
          )
          
          $downloadSuccess = $false
          
          foreach ($url in $eclipseUrls) {
            try {
              Write-Host "Attempting to download Eclipse from: $url"
              Invoke-WebRequest -Uri $url -OutFile "eclipse.zip" -TimeoutSec 600 -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
              
              # Verify download
              $fileSize = (Get-Item "eclipse.zip").Length
              if ($fileSize -gt 100MB) {
                Write-Host "Download successful - Size: $([math]::Round($fileSize / 1MB, 2)) MB"
                $downloadSuccess = $true
                break
              } else {
                Write-Warning "Downloaded file seems too small ($([math]::Round($fileSize / 1MB, 2)) MB), trying next URL..."
                Remove-Item "eclipse.zip" -ErrorAction SilentlyContinue
              }
            }
            catch {
              Write-Warning "Failed to download from $url : $_"
              Remove-Item "eclipse.zip" -ErrorAction SilentlyContinue
              continue
            }
          }
          
          if (-not $downloadSuccess) {
            Write-Error "Failed to download Eclipse from all available sources"
            exit 1
          }
          
          try {
            Write-Host "Extracting Eclipse..."
            Expand-Archive -Path "eclipse.zip" -DestinationPath "C:\" -Force
            Write-Host "Eclipse extracted successfully"
            
            # Cleanup
            Remove-Item "eclipse.zip" -ErrorAction SilentlyContinue
          }
          catch {
            Write-Error "Failed to extract Eclipse: $_"
            exit 1
          }
        shell: pwsh
        
      # Verify Eclipse installation
      - name: Verify Eclipse Installation
        run: |
          if (Test-Path "C:\eclipse\eclipse.exe") {
            Write-Host "Eclipse installation verified"
            Get-ChildItem "C:\eclipse\" | Select-Object Name, Length
          } else {
            Write-Error "Eclipse executable not found"
            exit 1
          }
        shell: pwsh
        
      # Install BPMN2 plugin with updated repositories
      - name: Install BPMN2 plugin
        run: |
          try {
            Write-Host "Installing BPMN2 Modeler plugin..."
            
            # For newer Eclipse versions, use updated repository
            $repositories = @(
              "https://download.eclipse.org/bpmn2-modeler/updates/",
              "https://download.eclipse.org/releases/2023-03/"
            )
            
            $installSuccess = $false
            
            foreach ($repo in $repositories) {
              try {
                Write-Host "Trying repository: $repo"
                $process = Start-Process -FilePath "C:\eclipse\eclipse.exe" -ArgumentList @(
                  "-application", "org.eclipse.equinox.p2.director",
                  "-noSplash",
                  "-repository", $repo,
                  "-installIU", "org.eclipse.bpmn2.modeler.feature.feature.group"
                ) -Wait -PassThru -WindowStyle Hidden -RedirectStandardError "error.log" -RedirectStandardOutput "output.log"
                
                if ($process.ExitCode -eq 0) {
                  Write-Host "BPMN2 plugin installed successfully from $repo"
                  $installSuccess = $true
                  break
                } else {
                  Write-Warning "Installation failed from $repo (Exit code: $($process.ExitCode))"
                  if (Test-Path "error.log") {
                    Get-Content "error.log" | Write-Warning
                  }
                }
              }
              catch {
                Write-Warning "Error trying repository $repo : $_"
              }
            }
            
            if (-not $installSuccess) {
              Write-Warning "Could not install BPMN2 plugin via p2 director, will try manual installation"
            }
          }
          catch {
            Write-Warning "Failed to install BPMN2 plugin: $_"
          }
        shell: pwsh
        
      # Enhanced manual BPMN2 Plugin download
      - name: Download BPMN2 Plugin (Manual Backup)
        run: |
          try {
            Write-Host "Setting up manual BPMN2 plugin installation..."
            $dropinsPath = "C:\eclipse\dropins"
            New-Item -ItemType Directory -Path $dropinsPath -Force
            
            # Updated plugin download URLs for newer Eclipse versions
            $pluginUrls = @{
              "org.eclipse.bpmn2.modeler.core.jar" = "https://repo1.maven.org/maven2/org/eclipse/bpmn2/org.eclipse.bpmn2.modeler.core/1.5.3.Final/org.eclipse.bpmn2.modeler.core-1.5.3.Final.jar"
              "org.eclipse.bpmn2.modeler.ui.jar" = "https://repo1.maven.org/maven2/org/eclipse/bpmn2/org.eclipse.bpmn2.modeler.ui/1.5.3.Final/org.eclipse.bpmn2.modeler.ui-1.5.3.Final.jar"
            }
            
            $downloadedPlugins = 0
            
            foreach ($plugin in $pluginUrls.GetEnumerator()) {
              try {
                Write-Host "Downloading $($plugin.Key)..."
                Invoke-WebRequest -Uri $plugin.Value -OutFile "$dropinsPath\$($plugin.Key)" -TimeoutSec 120 -UserAgent "Mozilla/5.0"
                
                $fileSize = (Get-Item "$dropinsPath\$($plugin.Key)").Length
                if ($fileSize -gt 1KB) {
                  Write-Host "Successfully downloaded $($plugin.Key) - Size: $([math]::Round($fileSize / 1KB, 2)) KB"
                  $downloadedPlugins++
                } else {
                  Write-Warning "$($plugin.Key) download seems incomplete"
                  Remove-Item "$dropinsPath\$($plugin.Key)" -ErrorAction SilentlyContinue
                }
              }
              catch {
                Write-Warning "Could not download $($plugin.Key): $_"
              }
            }
            
            if ($downloadedPlugins -gt 0) {
              Write-Host "Downloaded $downloadedPlugins BPMN2 plugin files to dropins folder"
              
              # Create a simple plugin manifest
              $manifest = "Manifest-Version: 1.0`n"
              $manifest += "Bundle-ManifestVersion: 2`n"
              $manifest += "Bundle-Name: BPMN2 Modeler Manual Install`n"
              $manifest += "Bundle-SymbolicName: org.eclipse.bpmn2.modeler.manual`n"
              $manifest += "Bundle-Version: 1.5.3`n"
              $manifest += "Bundle-Vendor: Manual Installation`n"
              $manifest | Out-File -FilePath "$dropinsPath\MANIFEST.MF" -Encoding ASCII
            } else {
              Write-Warning "No BPMN2 plugins could be downloaded manually"
            }
          }
          catch {
            Write-Warning "Manual BPMN2 plugin setup failed: $_"
          }
        shell: pwsh
        
      # Configure git
      - name: Configure git
        run: |
          git config --global user.name "bassemmarji"
          git config --global user.email "bassemmarji@gmail.com"
          
      # Create a smaller, more efficient archive
      - name: Create Eclipse portable package
        run: |
          try {
            Write-Host "Creating optimized Eclipse package..."
            
            # Create eclipse_package directory
            New-Item -ItemType Directory -Path "eclipse_package" -Force
            
            # Create a temporary directory for optimized Eclipse
            $tempEclipse = "C:\eclipse_temp"
            New-Item -ItemType Directory -Path $tempEclipse -Force
            
            # Copy essential Eclipse files only (exclude large unnecessary files)
            Write-Host "Copying essential Eclipse files..."
            $excludePatterns = @(
              "*.log",
              "*.tmp", 
              "workspace",
              "configuration\*.log",
              "dropins\*.source_*",
              "features\*.source_*",
              "plugins\*.source_*",
              "plugins\*.doc_*",
              "plugins\*.examples_*"
            )
            
            # Copy main Eclipse files
            Copy-Item -Path "C:\eclipse\eclipse.exe" -Destination $tempEclipse
            Copy-Item -Path "C:\eclipse\eclipsec.exe" -Destination $tempEclipse -ErrorAction SilentlyContinue
            Copy-Item -Path "C:\eclipse\eclipse.ini" -Destination $tempEclipse
            
            # Copy essential directories
            $essentialDirs = @("configuration", "features", "plugins", "dropins")
            foreach ($dir in $essentialDirs) {
              if (Test-Path "C:\eclipse\$dir") {
                Write-Host "Copying $dir..."
                Copy-Item -Path "C:\eclipse\$dir" -Destination $tempEclipse -Recurse -Force
              }
            }
            
            # Remove source plugins and docs to reduce size
            Write-Host "Optimizing package size..."
            # Get-ChildItem "$tempEclipse\plugins" -Filter "*.source_*" | Remove-Item -Force -ErrorAction SilentlyContinue
            # Get-ChildItem "$tempEclipse\plugins" -Filter "*.doc_*" | Remove-Item -Force -ErrorAction SilentlyContinue
            # Get-ChildItem "$tempEclipse\features" -Filter "*.source_*" | Remove-Item -Force -ErrorAction SilentlyContinue
            
            Write-Host "Compressing optimized Eclipse installation..."
            Compress-Archive -Path "$tempEclipse\*" -DestinationPath "eclipse_package\eclipse-portable.zip" -CompressionLevel Optimal
            
            # Cleanup temp directory
            Remove-Item -Path $tempEclipse -Recurse -Force
            
            $size = (Get-Item "eclipse_package\eclipse-portable.zip").Length / 1MB
            Write-Host "Optimized Eclipse package created: $([math]::Round($size, 2)) MB"
            
            # If still too large, create instructions instead
            if ($size -gt 90) {
              Write-Warning "Package is still large ($([math]::Round($size, 2)) MB). Creating download instructions instead."
              Remove-Item "eclipse_package\eclipse-portable.zip" -Force
              
              # Create download script instead
              $downloadScript = "# Eclipse Download Script`n"
              $downloadScript += "# This script downloads and sets up Eclipse with Activiti support`n`n"
              $downloadScript += "# Download Eclipse IDE for Java Developers`n"
              $downloadScript += "Invoke-WebRequest -Uri 'https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2023-03/R/eclipse-java-2023-03-R-win32-x86_64.zip&mirror_id=1' -OutFile 'eclipse.zip'`n"
              $downloadScript += "Expand-Archive -Path 'eclipse.zip' -DestinationPath 'C:\' -Force`n"
              $downloadScript += "Write-Host 'Eclipse installed to C:\eclipse'`n`n"
              $downloadScript += "# Install BPMN2 Modeler Plugin`n"
              $downloadScript += "C:\eclipse\eclipse.exe -application org.eclipse.equinox.p2.director -noSplash -repository https://download.eclipse.org/bpmn2-modeler/updates/ -installIU org.eclipse.bpmn2.modeler.feature.feature.group`n"
              
              $downloadScript | Out-File -FilePath "eclipse_package\setup-eclipse.ps1" -Encoding UTF8
              Write-Host "Created setup script instead of large archive"
            }
          }
          catch {
            Write-Error "Failed to create Eclipse package: $_"
            exit 1
          }
        shell: pwsh
        
      # Verify package before committing
      - name: Verify package integrity
        run: |
          if (Test-Path "eclipse_package\eclipse-portable.zip") {
            $size = (Get-Item "eclipse_package\eclipse-portable.zip").Length
            Write-Host "Package verification successful - Size: $([math]::Round($size / 1MB, 2)) MB"
            
            # Check if it's within GitHub limits
            if ($size -gt 90MB) {
              Write-Warning "Package exceeds GitHub's recommended size limit"
            }
          } elseif (Test-Path "eclipse_package\setup-eclipse.ps1") {
            Write-Host "Setup script created instead of large archive"
          } else {
            Write-Error "Neither package file nor setup script found"
            exit 1
          }
        shell: pwsh
        
      # Add to repository with better commit message
      - name: Add Eclipse package to repository
        run: |
          # Check if there are changes to commit
          git add eclipse_package/
          
          if (git diff --staged --quiet) {
            Write-Host "No changes to commit"
          } else {
            $commitMessage = "Add Eclipse Oxygen 4.7 portable package with BPMN2 Modeler"
            Write-Host "Committing changes..."
            git commit -m "$commitMessage"
            git push
            Write-Host "Eclipse package committed successfully"
          }
        shell: pwsh


      - name: Create and Split Eclipse Portable Package
        run: |
          try {
            Write-Host "Creating optimized Eclipse package..."
            New-Item -ItemType Directory -Path "eclipse_package" -Force
            $tempEclipse = "C:\eclipse_temp"
            New-Item -ItemType Directory -Path $tempEclipse -Force

            # Copy essential files only
            Copy-Item -Path "C:\eclipse\eclipse.exe" -Destination $tempEclipse
            Copy-Item -Path "C:\eclipse\eclipsec.exe" -Destination $tempEclipse -ErrorAction SilentlyContinue
            Copy-Item -Path "C:\eclipse\eclipse.ini" -Destination $tempEclipse

            $essentialDirs = @("configuration", "features", "plugins", "dropins")
            foreach ($dir in $essentialDirs) {
              if (Test-Path "C:\eclipse\$dir") {
                Write-Host "Copying $dir..."
                Copy-Item -Path "C:\eclipse\$dir" -Destination $tempEclipse -Recurse -Force
              }
            }

            # Clean up unnecessary files
            Get-ChildItem "$tempEclipse\plugins" -Filter "*.source_*" | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
            Get-ChildItem "$tempEclipse\plugins" -Filter "*.doc_*" | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
            Get-ChildItem "$tempEclipse\features" -Filter "*.source_*" | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue

            # Compress
            Compress-Archive -Path "$tempEclipse\*" -DestinationPath "eclipse_package\eclipse-portable.zip" -CompressionLevel Optimal
            Remove-Item -Path $tempEclipse -Recurse -Force

            $zipPath = "eclipse_package\eclipse-portable.zip"
            $sizeMB = (Get-Item $zipPath).Length / 1MB
            Write-Host "Final package size: $([math]::Round($sizeMB, 2)) MB"

            # Split into ~99MB chunks if needed
            if ($sizeMB -gt 90) {
              Write-Host "Splitting into chunks under 100 MB for GitHub compatibility..."

              $chunkSizeBytes = 99 * 1024 * 1024  # 99 MB
              $fileStream = [System.IO.File]::OpenRead($zipPath)
              $buffer = New-Object byte[] $chunkSizeBytes
              $index = 0
              while ($bytesRead = $fileStream.Read($buffer, 0, $buffer.Length)) {
                $chunkPath = "eclipse_package\eclipse-part-{0:D2}.zip" -f $index
                [System.IO.File]::WriteAllBytes($chunkPath, $buffer[0..($bytesRead-1)])
                Write-Host "Created: $chunkPath ($([math]::Round($bytesRead / 1MB, 2)) MB)"
                $index++
              }
              $fileStream.Close()

              # Remove original large zip
              Remove-Item $zipPath

              # ✅ SAFE STRING CONCATENATION (NO HERE-STRING)
              $reassembleScript = ""
              $reassembleScript += "Write-Host `"Reassembling eclipse-portable.zip from split parts...`"`n"
              $reassembleScript += "`$parts = Get-ChildItem `"eclipse-part-*`" | Sort-Object Name`n"
              $reassembleScript += "`$output = [System.IO.File]::Create(`"eclipse-portable.zip`")`n"
              $reassembleScript += "foreach (`$part in `$parts) {`n"
              $reassembleScript += "    Write-Host `"Processing `$(`$part.Name)...`"`n"
              $reassembleScript += "    `$data = [System.IO.File]::ReadAllBytes(`$part.FullName)`n"
              $reassembleScript += "    `$output.Write(`$data, 0, `$data.Length)`n"
              $reassembleScript += "}`n"
              $reassembleScript += "`$output.Close()`n"
              $reassembleScript += "Write-Host `"Reassembly complete: eclipse-portable.zip`"`n"
              $reassembleScript += "Write-Host `"You can now extract it with any ZIP tool.`"`n"

              $reassembleScript | Out-File -FilePath "eclipse_package\reassemble.ps1" -Encoding UTF8

              # Create README
              $readme = ""
              $readme += "# Eclipse Portable Package (Split)`n`n"
              $readme += "This package was split into multiple parts to fit GitHub size limits.`n`n"
              $readme += "## How to Reassemble:`n"
              $readme += "1. Open PowerShell in this folder`n"
              $readme += "2. Run: `".\reassemble.ps1`"`n"
              $readme += "3. Extract the generated `eclipse-portable.zip` to your desired location`n`n"
              $readme += "Generated on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n"

              $readme | Out-File -FilePath "eclipse_package\README.md" -Encoding UTF8

              Write-Host "Splitting completed and reassembly script created."
            } else {
              Write-Host "Package is small enough, no splitting needed."
            }
          }
          catch {
            Write-Error "Failed to create or split Eclipse package: $_"
            exit 1
          }
        shell: pwsh

      - name: Resolve Maven Repository Path
        run: |
          echo "M2_REPO=$env:USERPROFILE\.m2\repository" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh


      - name: Force Download maven-archetype-plugin
        run: |
          $m2Repo = "$env:USERPROFILE\.m2\repository"
          $archetypePluginDir = "$m2Repo\org\apache\maven\plugins\maven-archetype-plugin"
      
          # Optional: Clean incomplete downloads
          if (Test-Path $archetypePluginDir) {
            Write-Host "Cleaning incomplete maven-archetype-plugin cache..."
            Remove-Item -Path $archetypePluginDir -Recurse -Force
          }
          mvn help:help
          mvn dependency:resolve
          mvn dependency:go-offline
          
          Write-Host "Forcing download of maven-archetype-plugin..."
          mvn archetype:generate -B `
            -DgroupId=com.example `
            -DartifactId=test-offline-project `
            -Dversion=1.0.0 `
            -DarchetypeGroupId=org.apache.maven.archetypes `
            -DarchetypeArtifactId=maven-archetype-quickstart `
            -DarchetypeVersion=1.4 `
            -DinteractiveMode=false
      
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Maven archetype generation failed!"
            exit 1
          }
      
          Write-Host "maven-archetype-plugin and dependencies downloaded successfully."
        shell: cmd
              
      - name: Upload Maven Repository for Offline Use
        uses: actions/upload-artifact@v4
        with:
          name: maven-repository-offline
          path: ${{ env.M2_REPO }}
          retention-days: 7
          if-no-files-found: warn  # avoid aborting the job
      
      - name: Upload Eclipse Chunks
        uses: actions/upload-artifact@v4
        with:
                name: eclipse-portable-chunks
                path: |
                  eclipse_package/eclipse-part-??.zip
                  eclipse_package/reassemble.ps1
                  eclipse_package/README.md
                retention-days: 7

    
      # Create setup instructions
      - name: Create setup instructions
        run: |
          if (Test-Path "eclipse_package\eclipse-portable.zip") {
            # Instructions for portable package
            $instructions = "# Eclipse Portable Package`n`n"
            $instructions += "## What's Included`n"
            $instructions += "- Eclipse IDE for Java Developers (2023-03) - Optimized`n"
            $instructions += "- BPMN2 Modeler Plugin`n"
            $instructions += "- Maven Integration (m2e)`n`n"
            $instructions += "## Setup Steps`n"
            $instructions += "1. Download ``eclipse-portable.zip``from this folder`n"
            $instructions += "2. Extract to desired location (e.g., ``C:\eclipse``)`n"
            $instructions += "3. Run ``eclipse.exe`` to start Eclipse`n"
            $instructions += "4. Create workspace when prompted`n`n"
          } else {
            # Instructions for download script
            $instructions = "# Eclipse Setup via Download Script`n`n"
            $instructions += "## What's Included`n"
            $instructions += "- Automated download script for Eclipse IDE`n"
            $instructions += "- BPMN2 Modeler Plugin installation`n"
            $instructions += "- Maven Integration (m2e)`n`n"
            $instructions += "## Setup Steps`n"
            $instructions += "1. Download and run ``setup-eclipse.ps1`` (Run as Administrator)`n"
            $instructions += "2. Script will download and install Eclipse automatically`n"
            $instructions += "3. Run ``C:\eclipse\eclipse.exe`` when complete`n"
            $instructions += "4. Create workspace when prompted`n`n"
          }
          
          $instructions += "## Creating Activiti Project`n"
          $instructions += "1. File → New → Maven Project`n"
          $instructions += "2. Use archetype or create simple project`n"
          $instructions += "3. Add Activiti 6.0 dependencies to pom.xml`n"
          $instructions += "4. Create BPMN diagrams: File → New → Other → BPMN`n`n"
          $instructions += "## Troubleshooting`n"
          $instructions += "- If BPMN2 Modeler not working: Help → Install New Software → Add Local`n"
          $instructions += "- Maven issues: Right-click project → Maven → Reload Projects`n"
          $instructions += "- Memory issues: Edit eclipse.ini, increase -Xmx value`n`n"
          $instructions += "Generated on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n"
          $instructions += "Package optimized for GitHub file size limits`n"
          
          $instructions | Out-File -FilePath "eclipse_package\README.md" -Encoding UTF8
          Write-Host "Setup instructions created"
        shell: pwsh
