name: Backup Org Metadata and Data

# When the workflow will run
on:
 #schedule:
  # Runs at 12:00 UTC every day.
  # - cron: '0 12 * * *'
  
 # To manually trigger the workflow directly from Github UI or via the Github API.
 # This is particularly useful for workflows that perform manual tasks such as deploying software to production
 # database migrations, or any process that requires manual oversight.
 workflow_dispatch:
   # Define parameters for the workflow in order to pass parameters to it when triggered.
   # This makes the workflow more flexible and adaptable.
   inputs:
     # this will be refered to as ${{ github.event.inputs.commit_text }}
     commit_text:
       description: 'Commit text to use'    
       required: true
       default: 'New Manual Sync commit'

env:
  # Defining a Global environment variable accessible to all jobs and steps. 
  ORG_ALIAS: org_alias 
  
jobs:
 main_job:
   runs-on: ubuntu-latest
   steps:
     - name: 'Print Workflow Context Variables'
       run: |
        echo "This job was triggered by:"
        echo " * Actor = ${{ github.actor }}" 
        echo " * Event = ${{ github.event_name }}"  
        echo " * Repository = ${{ github.repository }}"
        echo " * Branch = ${{ github.ref }}"
        echo " * OS = ${{runner.os}} server hosted by Github."
        
     - name: 'Install Salesforce CLI'
       run: |
         wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
         mkdir ~/sfdx
         tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
         echo "$HOME/sfdx/bin" >> $GITHUB_PATH
         ~/sfdx/bin/sfdx version
         
     - name: 'Instll SFDX Texei Plugin'
       run: echo 'y' | sfdx plugins:install texei-sfdx-plugin
        
     - name: 'Checkout source code'
       uses: actions/checkout@main
      
     - name: 'Create file to authenticate to the org via SFDX'
       run: echo ${{ secrets.ORG_SFDX_URL }} > DEV-LOGIN.txt
      
     - name: 'Authenticate to the org using SFDX'
       run: sfdx force:auth:sfdxurl:store -f DEV-LOGIN.txt -d -a $ORG_ALIAS
     
     - name: 'Create project with manifest, Copy package.xml, Navigate to the project folder, Download metadata using SFDX'
       run: |
         rm DEV-LOGIN.txt
         if test -d "./backupfiles/force-app"; then
           echo force-app folder exists
         else
           sfdx force:project:create --projectname backupfiles --manifest
         fi
        
         if test -f "./backupfiles/sfdx-project.json"; then
           echo sfdx-project.json file exists
         else
           cp ./sfdx-project.json ./backupfiles/sfdx-project.json
         fi
        
         if test -f "./backupfiles/manifest/package.xml"; then
           echo package.xml file exists
         else
           cp ./package.xml ./backupfiles/manifest
         fi
     
         cd ./backupfiles
         sfdx force:source:retrieve --targetusername $ORG_ALIAS --manifest manifest/package.xml
         
     - name: 'Export Org Data'
       run: | 
         echo $GITHUB_PATH
         if test -d "./backupfiles/data"; then
            echo data folder exists
         else   
            mkdir -p ./backupfiles/data
            echo 'y' | sfdx texei:data:export --objects Account,Contact --outputdir ./backupfiles/data -o $ORG_ALIAS
         fi
         
     - name: Save repository owner email
       run: |
        echo "owner_email=$(git log -n 1 --pretty=format:%ae )" >> $GITHUB_ENV
       
     - name: Stage files and check for modified files
       id: git-check
       run: |
         git init
         git config user.email "${{ env.owner_email }}"
         git config user.name "${{ github.repository_owner }}"
         git add .
         echo "modified=$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)" >> $GITHUB_OUTPUT
         
     - name: Commit and push if there are modified files
       if: steps.git-check.outputs.modified == 'true'
       run: |
         git commit -m "${{ github.event.inputs.commit_text }} on ${{ github.event.repository.updated_at }}"
         echo "git-push=$(git push -u origin main)\n" >> $GITHUB_OUTPUT

     #- name: 'Send Job Status By Email'
     #  uses: dawidd6/action-send-mail@v4
     #  with:
             # Mail server settings
     #        server_address: smtp.gmail.com
     #        server_port: 465
             # Optional whether this connection use TLS
     #        secure: true
             # User credentials
     #        username: ${{ secrets.MAIL_USERNAME }}
     #        password: ${{ secrets.MAIL_PASSWORD }}
             # Email subject
     #        subject: ${{ github.job }} job of ${{ github.repository }} has  ${{ job.status }}
             # Email body
     #        body: ${{ github.job }} job in workflow ${{ github.workflow }} of ${{ github.repository }} has  ${{ job.status }}
             # Email To
     #        to: bassemmarji@gmail.com
             # Email From
     #        from: Bassem Marji
             # Optional unsigned/invalid certificates allowance
     #        ignore_cert: true
     #- name: 'Send Push Notification'
     #  uses: techulus/push-github-action@1.0.0
     #  env:
     #     API_KEY: ${{ secrets.API_KEY }}
     #     MESSAGE: "There is a new commit!"

