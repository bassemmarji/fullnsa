name: Backup Org Metadata and Data

# When the workflow will run
on:
 #schedule:
  # Runs at 12:00 UTC every day.
  # - cron: '0 12 * * *'
  
 # To manually trigger the workflow directly from Github UI or via the Github API.
 # This is particularly useful for workflows that perform manual tasks such as deploying software to production
 # database migrations, or any process that requires manual oversight.
 workflow_dispatch:
   # Define parameters for the workflow in order to pass parameters to it when triggered.
   # This makes the workflow more flexible and adaptable.
   inputs:
     # this will be refered to as ${{ github.event.inputs.commit_text }}
     commit_text:
       description: 'Commit Message'    
       required: true
       default: 'Backup of Org'

env:
  # Defining Global environment variables accessible to all jobs and steps. 
  ORG_ALIAS: org_alias 
  METADATA_FOLDERNAME: backupMetadata
  DATA_FOLDERNAME: backupData
  
jobs:
 main_job:
   runs-on: ubuntu-latest
   steps:
     - name: 'Print Workflow Context Variables'
       run: |
        echo "This job was triggered by:"
        echo " * Actor = ${{ github.actor }}" 
        echo " * Event = ${{ github.event_name }}"  
        echo " * Repository = ${{ github.repository }}"
        echo " * Branch = ${{ github.ref }}"
        echo " * OS = ${{runner.os}} server hosted by Github."

     - name: 'Install Salesforce CLI'
       run: |
         wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
         mkdir ~/sfdx
         tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
         echo "$HOME/sfdx/bin" >> $GITHUB_PATH
         ~/sfdx/bin/sfdx version         
         
     - name: 'Install SFDX Texei Plugin'
       run: echo 'y' | sfdx plugins:install texei-sfdx-plugin
       
     - name: Checkout
       uses: actions/checkout@v4

     - name: Use Node.js
       uses: actions/setup-node@v4
       with:
          node-version: '20.x'

     - name: 'Get node version'
       run: node --version

     - name: 'Install SFDMU'
       run: echo 'y' | sfdx plugins:install sfdmu

     #- name: 'Install Code Analyzer'
     #  run: echo 'y' | sfdx plugins:install @salesforce/sfdx-scanner@latest
       
     # - name: 'Checkout source code'
     #  uses: actions/checkout@main
      
     - name: 'Create file to authenticate to the org via SFDX'
       run: echo ${{ secrets.ORG_SFDX_URL }} > DEV-LOGIN.txt
      
     - name: 'Authenticate to the org using SFDX'
       run: |
         sfdx force:auth:sfdxurl:store -f DEV-LOGIN.txt -d -a $ORG_ALIAS
         rm DEV-LOGIN.txt
         echo "Authenticated to Target Org."
     
     - name: 'Create project with manifest, Copy package.xml, Navigate to the project folder, Download metadata using SFDX'
       run: |
         if test -d "./$METADATA_FOLDERNAME/force-app"; then
           echo "force-app folder exists"
         else
           sfdx force:project:create --name $METADATA_FOLDERNAME --manifest
         fi
         
         if test -f "./package.xml"; then
           echo "package.xml file exists"
           cp ./package.xml ./$METADATA_FOLDERNAME/manifest
         fi
     
         cd "./$METADATA_FOLDERNAME"
         sfdx force:source:retrieve --target-org $ORG_ALIAS --manifest manifest/package.xml

     - name: 'ReadOrg Objects'
       id: read-objects
       uses: juliangruber/read-file-action@v1
       with:
         path: './custom_objects.txt'

     - name: List Org Objects
       run: |
          echo 'Objects To Backup:'
          echo "${{ steps.read-objects.outputs.content }}"

     - name: 'Export Org Data'
       run: | 
         if test -d "./$DATA_FOLDERNAME"; then
            echo "./$DATA_FOLDERNAME" folder exists
         else   
            mkdir -p "./$DATA_FOLDERNAME"
         fi
         echo 'y' | sfdx texei:data:export --objects Account,Contact,Opportunity --outputdir "./$DATA_FOLDERNAME" --target-org  $ORG_ALIAS
       # echo 'y' | sfdx texei:data:export --objects "${{ steps.read-objects.outputs.content }}" --outputdir "./$DATA_FOLDERNAME" -o $ORG_ALIAS

     # Extract the git author email and store it in the global variable owner_email
     # This is done by sending a statement setting it to the $GITHUB_ENV file.
     - name: Save repository owner email
       run: |
        echo "owner_email=$(git log -n 1 --pretty=format:%ae )" >> $GITHUB_ENV
        
     # Create a new git repository
     # Change the email address you associate with your Git commits. The new email address you set will be visible in any future commits you push to GitHub from the command line.
     # Change the name you associate with your Git commits.
     # Add the entire directory to your commit recursively.
     # Determine if there are uncommitted changes in the GIT Tree
     - name: Stage files and check for modified files
       id: git-check
       run: |
         git init
         git config user.email "${{ env.owner_email }}"
         git config user.name "${{ github.repository_owner }}"
         git add .
         echo "modified=$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)" >> $GITHUB_OUTPUT
         #echo "Backup Folder Modified = ${{ steps.git-check.outputs.modified }}"
         
     # If there are uncommitted changes.
     #  Commit a snapshot of all changes in the working directory. This only includes modifications to tracked files (those that have been added with git add at some point in their history).
     # git push sync the local repository with its associated remote repository and updates it.
     - name: Commit and push if there are modified files
       if: steps.git-check.outputs.modified == 'true'
       run: |
         git commit -m "${{ github.event.inputs.commit_text }} on ${{ github.event.repository.updated_at }}"
         echo "git-push=$(git push -u origin main)\n" >> $GITHUB_OUTPUT
        
