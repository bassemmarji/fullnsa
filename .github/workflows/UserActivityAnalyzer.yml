name: AI Powered User Activity Analyzer

on:
  workflow_dispatch:
    inputs:
      org_alias:
        type: string
        default: dev
      days_back:
        type: number
        default: 30
      model_name:
        type: choice
        options: [llama3:latest, gpt-oss:latest, mistral:instruct]
        default: mistral:instruct

env:
  ORG_ALIAS: ${{ github.event.inputs.org_alias }}
  DAYS_BACK: ${{ github.event.inputs.days_back }}
  MODEL_NAME: ${{ github.event.inputs.model_name }}
  NODE_VERSION: "20"
  DATA_DIR: user-activity-data

jobs:
  collect-data:
    runs-on: ubuntu-latest
    outputs:
      has_data: ${{ steps.check.outputs.has_data }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Salesforce CLI + jq
        run: |
          npm install -g @salesforce/cli
          sf plugins:update
          sudo apt-get update && sudo apt-get install -y jq

      - name: Authenticate Salesforce
        run: echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url \
               --alias "$ORG_ALIAS" --set-default --sfdx-url-stdin

      - name: Query Login History
        id: logins
        run: |
          START_TIME=$(date -u -d "$DAYS_BACK days ago" '+%Y-%m-%dT%H:%M:%S.000Z')
          mkdir -p "$DATA_DIR"
          sf data query --query "
            SELECT Id, UserId, LoginTime, LoginType, SourceIp, Platform, Browser, Status
            FROM LoginHistory WHERE LoginTime >= $START_TIME
            ORDER BY LoginTime DESC LIMIT 1000
          " --target-org "$ORG_ALIAS" --result-format json > "$DATA_DIR/login_history.json"
          echo "Found $(jq -r '.result.totalSize' $DATA_DIR/login_history.json) logins"

      - name: Query User Info
        run: |
          ids=$(jq -r '.result.records[].UserId' "$DATA_DIR/login_history.json" | sort -u | head -100)
          if [ -n "$ids" ]; then
            soql_ids=$(printf "'%s'," $ids | sed 's/,$//')
            sf data query --query "
              SELECT Id, Username, Name, Email, Profile.Name, IsActive, LastLoginDate
              FROM User WHERE Id IN ($soql_ids)
            " --target-org "$ORG_ALIAS" --result-format json > "$DATA_DIR/user_details.json"
          fi

      - name: Query SetupAuditTrail
        run: |
          START=$(date -u -d "$DAYS_BACK days ago" '+%Y-%m-%dT%H:%M:%S.000Z')
          sf data query --query "
            SELECT Id, Action, Section, CreatedDate, CreatedBy.Username
            FROM SetupAuditTrail WHERE CreatedDate >= $START
            AND (Action LIKE '%User%' OR Action LIKE '%Login%')
            ORDER BY CreatedDate DESC LIMIT 500
          " --target-org "$ORG_ALIAS" --result-format json > "$DATA_DIR/setup_audit_trail.json" || true

      - name: Check Data
        id: check
        run: |
          count=$(jq -r '.result.totalSize // 0' "$DATA_DIR/login_history.json")
          if [ "$count" -gt 0 ]; then
            echo "has_data=true" >> $GITHUB_OUTPUT
          else
            echo "has_data=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: user-activity-data
          path: ${{ env.DATA_DIR }}
          retention-days: 7
          if-no-files-found: error

  analyze-data:
    runs-on: ubuntu-latest
    needs: collect-data
    if: needs.collect-data.outputs.has_data == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: user-activity-data
          path: data

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh -o install.sh
          chmod +x install.sh && ./install.sh
          echo "$HOME/.ollama/bin" >> $GITHUB_PATH
          export PATH="$HOME/.ollama/bin:$PATH"
          ollama serve &
          for i in {1..30}; do
            curl -s http://localhost:11434/api/version && break
            sleep 2
          done

      - name: Pull Model
        run: ollama pull "$MODEL_NAME"

      - name: Run AI Analysis
        run: |
          REPORT="user_activity_analysis.md"
          echo "# AI User Activity Analysis" > "$REPORT"
          echo "**Model:** $MODEL_NAME" >> "$REPORT"
          echo "" >> "$REPORT"
          prompt=$(jq -Rs '.' data/login_history.json data/user_details.json data/setup_audit_trail.json)
          ollama run "$MODEL_NAME" "$prompt" >> "$REPORT"

      - uses: actions/upload-artifact@v4
        with:
          name: user-activity-analysis-report
          path: user_activity_analysis.md
          retention-days: 14
