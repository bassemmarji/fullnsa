name: AI Powered Profiles and Permission Sets Analyzer

on:
  workflow_dispatch:
    inputs:
      org_alias:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
      model_name:
        type: choice
        description: "Ollama model to use"
        options:
          - llama3:latest
          - gpt-oss:latest
        default: llama3:latest

env:
  ORG_ALIAS: ${{ github.event.inputs.org_alias }}
  MODEL_NAME: ${{ github.event.inputs.model_name }}
  NODE_VERSION: "20"
  DATA_DIR: "security-profiles-data"

jobs:
  collect-security-data:
    name: Collect Profiles and Permission Sets Data
    runs-on: ubuntu-latest
    outputs:
      profile_count: ${{ steps.query-profiles.outputs.profile_count }}
      permset_count: ${{ steps.query-permsets.outputs.permset_count }}
      has_data: ${{ steps.check-data.outputs.has_data }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install --global @salesforce/cli
          sf plugins:update
          sudo apt-get update && sudo apt-get install -y jq
      
      - name: 🔐 Authenticate to Salesforce Org
        run: |
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url --alias $ORG_ALIAS --set-default --sfdx-url-stdin
          sf org list

      - name: Query Profiles
        id: query-profiles
        run: |
          mkdir -p "$DATA_DIR"
          echo "🔍 Querying profiles..."
          OFFSET=0
          > "$DATA_DIR/profiles_all.json"
          while true; do
            RESULT_FILE="$DATA_DIR/profiles_$OFFSET.json"
            sf data query \
              --query "SELECT Id, Name, UserLicense.Name, Description, CreatedDate, LastModifiedDate FROM Profile ORDER BY Name ASC LIMIT 200 OFFSET $OFFSET" \
              --target-org "$ORG_ALIAS" \
              --result-format json > "$RESULT_FILE"
            COUNT=$(jq -r '.result.records | length' "$RESULT_FILE")
            [ "$COUNT" -eq 0 ] && break
            OFFSET=$((OFFSET + 200))
          done
          # Merge paginated files into one JSON
          jq -s '{result:{records:map(.result.records) | add, totalSize:(map(.result.records)|add|length)}}' "$DATA_DIR"/profiles_*.json > "$DATA_DIR/profiles.json"
          
          # Query Object Permissions for Profiles
          if [ -f "$DATA_DIR/profiles.json" ]; then
            profile_ids=$(jq -r '.result.records[].Id' "$DATA_DIR/profiles.json" | tr '\n' ',' | sed 's/,$//')
            if [ -n "$profile_ids" ]; then
              sf data query \
                --query "SELECT Id, ParentId, SobjectType, PermissionsRead, PermissionsCreate, PermissionsEdit, PermissionsDelete, PermissionsViewAllRecords, PermissionsModifyAllRecords FROM ObjectPermissions WHERE Parent.ProfileId IN ($profile_ids)" \
                --target-org "$ORG_ALIAS" \
                --result-format json --all > "$DATA_DIR/profile_object_perms.json" || echo "{}" > "$DATA_DIR/profile_object_perms.json"
            fi
          fi
          
          # Query Field Permissions for Profiles (sample for key objects, adjust as needed)
          sf data query \
            --query "SELECT Id, ParentId, Field, PermissionsRead, PermissionsEdit FROM FieldPermissions WHERE Parent.ProfileId != null LIMIT 5000" \
            --target-org "$ORG_ALIAS" \
            --result-format json --all > "$DATA_DIR/profile_field_perms.json" || echo "{}" > "$DATA_DIR/profile_field_perms.json"
          
          profile_count=$(jq -r '.result.totalSize // 0' "$DATA_DIR/profiles.json")
          echo "profile_count=$profile_count" >> $GITHUB_OUTPUT
      
      - name: Query Permission Sets
        id: query-permsets
        timeout-minutes: 10
        run: |
          echo "🔍 Querying permission sets..."
          OFFSET=0
          > "$DATA_DIR/permsets_all.json"
          while true; do
            RESULT_FILE="$DATA_DIR/permsets_$OFFSET.json"
            sf data query \
              --query "SELECT Id, Name, Description, IsOwnedByProfile, Profile.Name, NamespacePrefix, CreatedDate, LastModifiedDate FROM PermissionSet ORDER BY Name ASC LIMIT 200 OFFSET $OFFSET" \
              --target-org "$ORG_ALIAS" \
              --result-format json > "$RESULT_FILE"
            COUNT=$(jq -r '.result.records | length' "$RESULT_FILE")
            [ "$COUNT" -eq 0 ] && break
            OFFSET=$((OFFSET + 200))
          done
          # Merge paginated files into one JSON
          jq -s '{result:{records:map(.result.records) | add, totalSize:(map(.result.records)|add|length)}}' "$DATA_DIR"/permsets_*.json > "$DATA_DIR/permission_sets.json"
          
          # Query Object Permissions for Permission Sets
          if [ -f "$DATA_DIR/permission_sets.json" ]; then
            permset_ids=$(jq -r '.result.records[].Id' "$DATA_DIR/permission_sets.json" | tr '\n' ',' | sed 's/,$//')
            if [ -n "$permset_ids" ]; then
              sf data query \
                --query "SELECT Id, ParentId, SobjectType, PermissionsRead, PermissionsCreate, PermissionsEdit, PermissionsDelete, PermissionsViewAllRecords, PermissionsModifyAllRecords FROM ObjectPermissions WHERE Parent.PermissionSetId IN ($permset_ids)" \
                --target-org "$ORG_ALIAS" \
                --result-format json --all > "$DATA_DIR/permset_object_perms.json" || echo "{}" > "$DATA_DIR/permset_object_perms.json"
            fi
          fi
          
          # Query Field Permissions for Permission Sets
          sf data query \
            --query "SELECT Id, ParentId, Field, PermissionsRead, PermissionsEdit FROM FieldPermissions WHERE Parent.PermissionSetId != null LIMIT 5000" \
            --target-org "$ORG_ALIAS" \
            --result-format json --all > "$DATA_DIR/permset_field_perms.json" || echo "{}" > "$DATA_DIR/permset_field_perms.json"
          
          # Query Permission Set Assignments
          if [ -n "$permset_ids" ]; then
            sf data query \
              --query "SELECT Id, AssigneeId, PermissionSetId, Assignee.Name, Assignee.Username FROM PermissionSetAssignment WHERE PermissionSetId IN ($permset_ids)" \
              --target-org "$ORG_ALIAS" \
              --result-format json --all > "$DATA_DIR/permset_assignments.json" || echo "{}" > "$DATA_DIR/permset_assignments.json"
          fi
          
          permset_count=$(jq -r '.result.totalSize // 0' "$DATA_DIR/permission_sets.json")
          echo "permset_count=$permset_count" >> $GITHUB_OUTPUT
      
      - name: Query Additional Security Data
        timeout-minutes: 10
        run: |
          # Query SetupAuditTrail for permission-related changes (last 30 days for recency)
          DAYS_BACK=30
          SETUP_START_TIME=$(date -u -d "$DAYS_BACK days ago" '+%Y-%m-%dT%H:%M:%S.000Z')

          SETUP_QUERY="SELECT Id, Action, Section, CreatedDate, CreatedById, CreatedBy.Username,
                              CreatedBy.Name, Display, DelegateUser, ResponsibleNamespacePrefix
                       FROM SetupAuditTrail 
                       WHERE CreatedDate >= $SETUP_START_TIME 
                       AND (Action LIKE '%Permission%' OR Action LIKE '%Profile%' OR Action LIKE '%Security%' OR Action LIKE '%Object%' OR Action LIKE '%Field%')
                       ORDER BY CreatedDate DESC"

          echo "Executing SetupAuditTrail SOQL query..."
          sf data query \
            --query "$SETUP_QUERY" \
            --target-org "$ORG_ALIAS" \
            --result-format json \
            --all > "$DATA_DIR/setup_audit_trail.json" || echo "⚠️ SetupAuditTrail query failed (may not have access)"
      
      - name: Check Data Availability
        id: check-data
        run: |
          profile_count=$(jq -r '.result.totalSize // 0' "$DATA_DIR/profiles.json" 2>/dev/null || echo "0")
          permset_count=$(jq -r '.result.totalSize // 0' "$DATA_DIR/permission_sets.json" 2>/dev/null || echo "0")
          total_entities=$((profile_count + permset_count))
          
          if [ "$total_entities" -eq 0 ]; then
            echo "⚠️ No profiles or permission sets found"
            echo "has_data=false" >> $GITHUB_OUTPUT
            echo "No security configuration data found" > "$DATA_DIR/no-data-found.txt"
          else
            echo "✅ Found security configuration data to analyze"
            echo "has_data=true" >> $GITHUB_OUTPUT
            
            # Create summary statistics
            jq -r --arg profiles "$profile_count" --arg permsets "$permset_count" '{
              summary: {
                total_profiles: ($profiles | tonumber),
                total_permission_sets: ($permsets | tonumber),
                total_entities: (($profiles | tonumber) + ($permsets | tonumber)),
                audit_changes: (.result.totalSize // 0)
              }
            }' "$DATA_DIR/setup_audit_trail.json" > "$DATA_DIR/data_summary.json"
          fi
      
      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-profiles-data
          path: ${{ env.DATA_DIR }}
          retention-days: 7
          if-no-files-found: warn

      - name: 📄 Summary of Collected Data
        run: |
          {
            echo "## 📊 Data Collection Summary" 
            echo "- Org Alias: **$ORG_ALIAS**" 
            echo "- Profiles Found: **${{ steps.query-profiles.outputs.profile_count }}**" 
            echo "- Permission Sets: **${{ steps.query-permsets.outputs.permset_count }}**"
            if [ "${{ steps.check-data.outputs.has_data }}" = "true" ]; then
              echo "- Data Available: ✅ **Yes**"
              echo "- Artifact: \`security-profiles-data\`"
            else
              echo "- Data Available: ❌ **No data found**"
            fi
          } >> $GITHUB_STEP_SUMMARY
         
  analyze-security-config:
    name: Analyze Profiles and Permission Sets with AI
    runs-on: ubuntu-latest
    needs: collect-security-data
    if: needs.collect-security-data.outputs.has_data == 'true'
    steps:
      - name: Download Security Artifacts
        uses: actions/download-artifact@v4
        with:
          name: security-profiles-data
          path: data

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh -o install.sh
          chmod +x install.sh && ./install.sh
          echo "$HOME/.ollama/bin" >> $GITHUB_PATH
          export PATH="$HOME/.ollama/bin:$PATH"
          ollama serve &
          for i in {1..30}; do
            curl -s http://localhost:11434/api/version && break
            sleep 2
          done
      
      - name: Download Model
        timeout-minutes: 30
        run: |
          MODEL="${{ inputs.model_name }}"
          echo "📥 Downloading Ollama model: $MODEL"
          ollama pull "$MODEL"
          
          echo "🔍 Verifying model installation..."
          ollama list
      
      - name: Analyze Security Configuration Data
        run: |
          REPORT_FILE="security_analysis_report.md"
          MODEL="${{ inputs.model_name }}"
      
          # Initialize report
          echo "# AI Profiles and Permission Sets Security Analysis Report" > "$REPORT_FILE"
          echo "**Analysis Date:** $(date)" >> "$REPORT_FILE"
          echo "**Model Used:** $MODEL" >> "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"
          
          # Add data summary if available
          if [ -f "data/data_summary.json" ]; then
            echo "## 📊 Data Overview" >> "$REPORT_FILE"
            echo '```json' >> "$REPORT_FILE"
            jq '.' data/data_summary.json >> "$REPORT_FILE"
            echo '```' >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
          fi
      
          # Generate comprehensive analysis prompt
          generate_analysis_prompt() {
            local profiles="$1"
            local profile_obj_perms="$2"
            local profile_field_perms="$3"
            local permsets="$4"
            local permset_obj_perms="$5"
            local permset_field_perms="$6"
            local assignments="$7"
            local audit_data="$8"
            
            cat <<EOF
            You are a Salesforce Security Analyst specializing in profiles, permission sets, and access control analysis. Your goal is to produce a comprehensive, actionable, and well-structured security assessment report based on the provided Salesforce security configuration data. The report must identify risks, prioritize findings, and align with Salesforce security best practices and compliance requirements (e.g., GDPR, SOX, ISO 27001).
            
            **Data Provided:**
            1. Profiles: Metadata including Id, Name, UserLicense, Description, CreatedDate, LastModifiedDate
            2. Profile Object Permissions: Object-level access (Read, Create, Edit, Delete, View All, Modify All)
            3. Profile Field Permissions: Field-level access (Read, Edit) for profiles
            4. Permission Sets: Metadata including Id, Name, Description, IsOwnedByProfile, Profile.Name, NamespacePrefix
            5. Permission Set Object Permissions: Object-level access for permission sets
            6. Permission Set Field Permissions: Field-level access for permission sets
            7. Permission Set Assignments: User assignments to permission sets
            8. SetupAuditTrail: Recent changes to permissions, profiles, or objects
            
            **Required Output Format (Markdown):**
            
            ## 🚨 Critical Security Findings
            | Severity | Finding | Evidence | Recommendation | Priority | Owner |
            |----------|---------|----------|----------------|----------|-------|
            | HIGH/MEDIUM/LOW | Detailed description of issue | Specific Profile/PermSet ID, Object, Field, or User | Actionable steps with timeline | Urgent/High/Medium | Role or team responsible |
            
            ## 👥 Profile Analysis
            | Profile Name | Key Permissions | Objects Affected | Risk Level | Notes |
            |--------------|-----------------|------------------|------------|-------|
            | [Name] | List risky perms (e.g., Modify All Data on Account) | Objects impacted | HIGH/MEDIUM/LOW | Reasoning and context |
            
            ## 🔑 Permission Sets Analysis
            | Permission Set Name | Key Permissions | Assigned Users | Objects Affected | Risk Level | Notes |
            |---------------------|-----------------|---------------|------------------|------------|-------|
            | [Name] | List risky perms | Number of users or specific users | Objects impacted | HIGH/MEDIUM/LOW | Reasoning and context |
            
            ## 🔄 Permission Overlaps and Redundancies
            | Profile/PermSet Pair | Overlapping Permissions | Objects/Fields | Risk Level | Recommendation |
            |----------------------|-------------------------|---------------|------------|----------------|
            | [Profile/PermSet Names] | Permissions granted by both | Affected objects/fields | HIGH/MEDIUM/LOW | Steps to consolidate or remove redundancy |
            
            ## 👤 User Assignment Analysis
            | Issue | Affected Users | Permission Sets | Risk Level | Recommendation |
            |-------|----------------|-----------------|------------|----------------|
            | [e.g., Inactive User Assigned] | User IDs/Names | PermSet Names | HIGH/MEDIUM/LOW | Action to resolve |
            
            ## 📊 Over-Permissions and Least Privilege Violations
            - **Admin-like Profiles:** Profiles with System Administrator or excessive permissions
            - **Broad Object Access:** Objects with View All/Modify All enabled unnecessarily
            - **Sensitive Field Access:** Fields (e.g., SSN, Credit Card) editable by non-privileged users
            - **Custom Object Risks:** Excessive access to custom objects
            - **Namespace Issues:** Custom or non-standard namespace permissions
            
            ## 🔐 Compliance and Best Practices
            | Compliance Area | Issue | Evidence | Recommendation |
            |-----------------|-------|----------|----------------|
            | [e.g., GDPR, SOX] | Description of non-compliance | Specific permissions or assignments | Steps to align with compliance |
            
            ## 🔄 Recent Changes Review
            | Date | Action | Changed By | Impact | Risk Level | Recommendation |
            |------|--------|------------|--------|------------|----------------|
            | [Timestamp] | [Action, e.g., Permission Modified] | User ID/Name | Affected Profile/PermSet | HIGH/MEDIUM/LOW | Action to validate or revert |
            
            ## 📋 Summary of Findings
            - **Total Profiles Analyzed:** [Number]
            - **Total Permission Sets Analyzed:** [Number]
            - **Total Assignments Reviewed:** [Number]
            - **Key Risks Identified:** [Summary of high-priority issues]
            - **Next Steps:** [High-level recommendations and follow-up actions]
            
            **Analysis Rules:**
            - **Risk Rating Criteria:**
              - **HIGH**: Immediate risk (e.g., Modify All Data on sensitive objects like User, Account; inactive users with active assignments; recent unauthorized changes)
              - **MEDIUM**: Potential risk requiring review (e.g., broad View All access, custom object over-permissions, redundant permissions)
              - **LOW**: Minor issues or best practice improvements (e.g., missing descriptions, non-standard namespaces)
            - Flag profiles/permission sets granting Modify All Data, View All Records, or Delete on sensitive objects (e.g., User, Account, Opportunity, Contact, Custom Objects with sensitive data)
            - Identify over-assigned admin permissions (e.g., System Administrator, Customize Application)
            - Detect permission sets assigned to inactive users or inappropriate roles
            - Highlight custom objects with excessive permissions (e.g., Modify All Data)
            - Check for overlapping permissions between profiles and permission sets that could lead to unintended access
            - Identify sensitive fields (e.g., SSN, Credit Card, Email) with inappropriate Read/Edit access
            - Review SetupAuditTrail for recent changes to profiles, permission sets, or objects; flag unauthorized or risky modifications
            - Validate namespace prefixes for potential third-party or unmanaged package risks
            - Ensure compliance with GDPR (data access restrictions), SOX (audit trails), and Salesforce best practices (least privilege, segregation of duties)
            - Flag permission sets with no assignments or profiles with no users
            - Be specific with IDs, names, objects, fields, and timestamps
            - Provide actionable recommendations with priority (Urgent/High/Medium) and suggested owners (e.g., Salesforce Admin, Security Team)
            - Handle missing data gracefully (e.g., note if audit trail or assignments are unavailable)
            - Base conclusions ONLY on provided data; do not assume or infer beyond the data
            
            **Data:**
            PROFILES:
            $profiles
            
            PROFILE OBJECT PERMS:
            $profile_obj_perms
            
            PROFILE FIELD PERMS:
            $profile_field_perms
            
            PERMISSION SETS:
            $permsets
            
            PERMSET OBJECT PERMS:
            $permset_obj_perms
            
            PERMSET FIELD PERMS:
            $permset_field_perms
            
            ASSIGNMENTS:
            $assignments
            
            AUDIT TRAIL:
            $audit_data
            EOF
            } 
          
          # Prepare data for analysis
          profiles=$(cat data/profiles.json 2>/dev/null || echo "{}")
          profile_obj_perms=$(cat data/profile_object_perms.json 2>/dev/null || echo "{}")
          profile_field_perms=$(cat data/profile_field_perms.json 2>/dev/null || echo "{}")
          permsets=$(cat data/permission_sets.json 2>/dev/null || echo "{}")
          permset_obj_perms=$(cat data/permset_object_perms.json 2>/dev/null || echo "{}")
          permset_field_perms=$(cat data/permset_field_perms.json 2>/dev/null || echo "{}")
          assignments=$(cat data/permset_assignments.json 2>/dev/null || echo "{}")
          audit_data=$(cat data/setup_audit_trail.json 2>/dev/null || echo "{}")
      
          # Generate analysis
          echo "🤖 Generating comprehensive AI analysis..."
          generate_analysis_prompt "$profiles" "$profile_obj_perms" "$profile_field_perms" "$permsets" "$permset_obj_perms" "$permset_field_perms" "$assignments" "$audit_data" | ollama run "$MODEL" >> "$REPORT_FILE"
          
          # Add technical appendix
          echo -e "\n---\n" >> "$REPORT_FILE"
          echo "## 📋 Technical Data Summary" >> "$REPORT_FILE"
          echo "- **Total Profiles:** $(jq -r '.result.totalSize // 0' data/profiles.json 2>/dev/null || echo 'N/A')" >> "$REPORT_FILE"
          echo "- **Total Permission Sets:** $(jq -r '.result.totalSize // 0' data/permission_sets.json 2>/dev/null || echo 'N/A')" >> "$REPORT_FILE"
          echo "- **Report Generated:** $(date)" >> "$REPORT_FILE"
          
      - name: Upload Analysis Report
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-report
          path: security_analysis_report.md
          retention-days: 14

      - name: 📄 Analysis Summary
        env:
          MODEL: ${{ inputs.model_name }}
        run: |
          {
            echo "## 🧠 Security Configuration Analysis Summary"
            profile_count=$(jq -r '.result.totalSize // 0' data/profiles.json 2>/dev/null || echo '0')
            permset_count=$(jq -r '.result.totalSize // 0' data/permission_sets.json 2>/dev/null || echo '0')
            echo "- **Profiles Analyzed:** $profile_count" 
            echo "- **Permission Sets Analyzed:** $permset_count"
            echo "- **AI Model:** \`$MODEL\`"
            echo "- **Report:** \`security_analysis_report.md\`"
            echo "- **Artifact:** \`security-analysis-report\`" 
            echo ""
          } >> $GITHUB_STEP_SUMMARY
