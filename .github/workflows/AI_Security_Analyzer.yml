name: AI Powered Profiles and Permission Sets Analyzer (Enhanced)

on:
  workflow_dispatch:
    inputs:
      org_alias:
        type: string
        description: "Salesforce org alias"
        required: true
        default: "dev"
      model_name:
        type: choice
        description: "Ollama model to use"
        options:
          - llama3:latest
          - gpt-oss:latest
        default: llama3:latest

permissions:
  contents: read
  actions: read
  id-token: none

env:
  ORG_ALIAS: ${{ github.event.inputs.org_alias }}
  MODEL_NAME: ${{ github.event.inputs.model_name }}
  NODE_VERSION: "20"
  DATA_DIR: "security-profiles-data"

jobs:
  setup-environment:
    name: Setup Node and CLI Environment
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-npm.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache npm dependencies
        uses: actions/cache@v4
        id: cache-npm
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Cache Salesforce CLI
        uses: actions/cache@v4
        with:
          path: ~/.sf
          key: ${{ runner.os }}-sfcli-${{ env.NODE_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install --global @salesforce/cli
          sf plugins:update
          sudo apt-get update && sudo apt-get install -y jq

  collect-profiles:
    name: Collect Profiles Data
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - uses: actions/checkout@v4

      - name: 🔐 Authenticate to Salesforce Org
        run: |
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url \
            --alias $ORG_ALIAS --set-default --sfdx-url-stdin > /dev/null
          echo "Logged in as: $(sf org display --json | jq -r '.result.username')"

      - name: 🧾 Log Workflow Invoker
        run: echo "Triggered by: ${{ github.actor }} on $(date -u)" > audit.log

      - name: Query Profiles (using --all)
        run: |
          mkdir -p "$DATA_DIR"
          sf data query \
            --query "SELECT Id, Name, UserLicense.Name, Description, CreatedDate, LastModifiedDate FROM Profile" \
            --target-org "$ORG_ALIAS" --result-format json --all > "$DATA_DIR/profiles.json"
          jq -r '.result.totalSize // 0' "$DATA_DIR/profiles.json" > "$DATA_DIR/profile_count.txt"

      - name: Upload Profiles Artifact
        uses: actions/upload-artifact@v4
        with:
          name: profiles-data
          path: ${{ env.DATA_DIR }}

  collect-permsets:
    name: Collect Permission Sets Data
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - uses: actions/checkout@v4

      - name: 🔐 Authenticate to Salesforce Org
        run: |
          echo "${{ secrets.ORG_SFDX_URL }}" | sf org login sfdx-url \
            --alias $ORG_ALIAS --set-default --sfdx-url-stdin > /dev/null

      - name: Query Permission Sets (using --all)
        run: |
          mkdir -p "$DATA_DIR"
          sf data query \
            --query "SELECT Id, Name, Description, IsOwnedByProfile, Profile.Name, NamespacePrefix, CreatedDate, LastModifiedDate FROM PermissionSet" \
            --target-org "$ORG_ALIAS" --result-format json --all > "$DATA_DIR/permission_sets.json"
          jq -r '.result.totalSize // 0' "$DATA_DIR/permission_set_count.txt"

      - name: Upload Permission Sets Artifact
        uses: actions/upload-artifact@v4
        with:
          name: permset-data
          path: ${{ env.DATA_DIR }}

  analyze-security-config:
    name: Analyze Profiles and Permission Sets with AI
    runs-on: ubuntu-latest
    needs: [collect-profiles, collect-permsets]
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: data

      - name: Start Timing
        id: timing-start
        run: echo "start_time=$(date +%s)" >> $GITHUB_ENV

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh -o install.sh
          chmod +x install.sh && ./install.sh
          echo "$HOME/.ollama/bin" >> $GITHUB_PATH
          export PATH="$HOME/.ollama/bin:$PATH"
          ollama serve &
          for i in {1..30}; do
            curl -s http://localhost:11434/api/version && break
            sleep 2
          done

      - name: Download Model
        run: |
          MODEL="${{ inputs.model_name }}"
          echo "📥 Downloading Ollama model: $MODEL"
          ollama pull "$MODEL"
          ollama list

      - name: Summarize JSON for Analysis
        run: |
          mkdir -p summaries
          jq '[.result.records[] | {Id, Name, UserLicense: .UserLicense.Name}]' data/profiles.json > summaries/profiles_summary.json
          jq '[.result.records[] | {Id, Name, IsOwnedByProfile, Profile: .Profile.Name}]' data/permission_sets.json > summaries/permsets_summary.json

      - name: Generate AI Analysis Report
        run: |
          REPORT_FILE="security_analysis_report.md"
          MODEL="${{ inputs.model_name }}"
          echo "# AI Security Analysis Report" > "$REPORT_FILE"
          echo "**Analysis Date:** $(date)" >> "$REPORT_FILE"
          echo "**Model Used:** $MODEL" >> "$REPORT_FILE"
          echo "**Run ID:** ${{ github.run_id }}" >> "$REPORT_FILE"
          echo "**Triggered by:** ${{ github.actor }}" >> "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"
          
          echo "## 📊 Data Summary" >> "$REPORT_FILE"
          echo "- Profiles: $(jq -r '. | length' summaries/profiles_summary.json)" >> "$REPORT_FILE"
          echo "- Permission Sets: $(jq -r '. | length' summaries/permsets_summary.json)" >> "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"

          echo "🤖 Generating AI analysis..."
          (cat summaries/profiles_summary.json summaries/permsets_summary.json | ollama run "$MODEL" >> "$REPORT_FILE") \
            || echo "⚠️ AI analysis failed or model unavailable." >> "$REPORT_FILE"

      - name: End Timing and Record Duration
        run: |
          end_time=$(date +%s)
          duration=$((end_time - $start_time))
          echo "Total Duration: ${duration}s" >> metrics.log
          echo "duration=${duration}" >> $GITHUB_ENV

      - name: Upload Analysis Report
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-report
          path: security_analysis_report.md
          retention-days: 14

      - name: 📄 Summary
        run: |
          {
            echo "## 🧠 Security Configuration Analysis Summary"
            echo "- **AI Model:** \`${{ inputs.model_name }}\`"
            echo "- **Duration:** ${duration}s"
            echo "- **Run ID:** ${{ github.run_id }}"
            echo "- **Report Artifact:** \`security-analysis-report\`"
          } >> $GITHUB_STEP_SUMMARY
